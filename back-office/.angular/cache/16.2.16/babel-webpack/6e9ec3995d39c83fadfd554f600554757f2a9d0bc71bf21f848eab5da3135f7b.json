{"ast":null,"code":"import { inject } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\nexport const tokenInterceptor = (request, next) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // Add auth header with JWT token if available\n  const token = authService.getToken();\n  if (token) {\n    request = addToken(request, token);\n  }\n  return next(request).pipe(catchError(error => {\n    if (error.status === 401) {\n      // Auto logout if 401 response returned from API\n      authService.logout();\n      router.navigate(['/auth']);\n    }\n    return throwError(() => error);\n  }));\n};\nconst addToken = (request, token) => {\n  return request.clone({\n    setHeaders: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};","map":{"version":3,"names":["inject","throwError","catchError","AuthService","Router","tokenInterceptor","request","next","authService","router","token","getToken","addToken","pipe","error","status","logout","navigate","clone","setHeaders","Authorization"],"sources":["C:\\Users\\GHAZI\\Desktop\\Back Up - Copie - Copie\\back-office\\src\\app\\core\\auth\\token.interceptor.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandlerFn,\n  HttpErrorResponse,\n  HttpInterceptorFn\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\n\nexport const tokenInterceptor: HttpInterceptorFn = (\n  request: HttpRequest<unknown>, \n  next: HttpHandlerFn\n): Observable<any> => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  \n  // Add auth header with JWT token if available\n  const token = authService.getToken();\n  \n  if (token) {\n    request = addToken(request, token);\n  }\n  \n  return next(request).pipe(\n    catchError((error: HttpErrorResponse) => {\n      if (error.status === 401) {\n        // Auto logout if 401 response returned from API\n        authService.logout();\n        router.navigate(['/auth']);\n      }\n      return throwError(() => error);\n    })\n  );\n};\n\nconst addToken = (request: HttpRequest<unknown>, token: string): HttpRequest<unknown> => {\n  return request.clone({\n    setHeaders: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AAOtC,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,MAAM,QAAQ,iBAAiB;AAExC,OAAO,MAAMC,gBAAgB,GAAsBA,CACjDC,OAA6B,EAC7BC,IAAmB,KACA;EACnB,MAAMC,WAAW,GAAGR,MAAM,CAACG,WAAW,CAAC;EACvC,MAAMM,MAAM,GAAGT,MAAM,CAACI,MAAM,CAAC;EAE7B;EACA,MAAMM,KAAK,GAAGF,WAAW,CAACG,QAAQ,EAAE;EAEpC,IAAID,KAAK,EAAE;IACTJ,OAAO,GAAGM,QAAQ,CAACN,OAAO,EAAEI,KAAK,CAAC;;EAGpC,OAAOH,IAAI,CAACD,OAAO,CAAC,CAACO,IAAI,CACvBX,UAAU,CAAEY,KAAwB,IAAI;IACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MACxB;MACAP,WAAW,CAACQ,MAAM,EAAE;MACpBP,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;IAE5B,OAAOhB,UAAU,CAAC,MAAMa,KAAK,CAAC;EAChC,CAAC,CAAC,CACH;AACH,CAAC;AAED,MAAMF,QAAQ,GAAGA,CAACN,OAA6B,EAAEI,KAAa,KAA0B;EACtF,OAAOJ,OAAO,CAACY,KAAK,CAAC;IACnBC,UAAU,EAAE;MACVC,aAAa,EAAE,UAAUV,KAAK;;GAEjC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}