{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nlet CommentService = /*#__PURE__*/(() => {\n  class CommentService {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    // Method to fetch all comments\n    getComments() {\n      return this.apiService.get('/api/admin/dashboard/comments').pipe(map(response => response.content));\n    }\n    // Method to search comments based on a query string\n    // According to the API documentation, we only have specific endpoints and\n    // might need to adjust this based on actual implementation\n    searchComments(query) {\n      return this.apiService.get('/api/admin/dashboard/comments/search', {\n        query\n      });\n    }\n    deleteComment(id) {\n      return this.apiService.delete(`/api/admin/dashboard/comments/${id}`);\n    }\n    static {\n      this.ɵfac = function CommentService_Factory(t) {\n        return new (t || CommentService)(i0.ɵɵinject(i1.ApiService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CommentService,\n        factory: CommentService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CommentService;\n})();\nexport { CommentService };","map":{"version":3,"names":["map","CommentService","constructor","apiService","getComments","get","pipe","response","content","searchComments","query","deleteComment","id","delete","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\GHAZI\\Desktop\\Back Up - Copie - Copie\\back-office\\src\\app\\core\\services\\comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { Comment } from '../models/comment.model';\nimport { map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n  constructor(private apiService: ApiService) { }\n\n  // Method to fetch all comments\n  getComments(): Observable<Comment[]> {\n    return this.apiService.get<any>('/api/admin/dashboard/comments').pipe(\n      map(response => response.content)\n    );\n  }\n  // Method to search comments based on a query string\n  // According to the API documentation, we only have specific endpoints and\n  // might need to adjust this based on actual implementation\n  searchComments(query: string): Observable<Comment[]> {\n    return this.apiService.get<Comment[]>('/api/admin/dashboard/comments/search', { query });\n  }\n\n  deleteComment(id: string): Observable<any> {\n    return this.apiService.delete<any>(`/api/admin/dashboard/comments/${id}`);\n  }\n}\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;IAMvBC,cAAc;EAH3B,MAGaA,cAAc;IACzBC,YAAoBC,UAAsB;MAAtB,KAAAA,UAAU,GAAVA,UAAU;IAAgB;IAE9C;IACAC,WAAWA,CAAA;MACT,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAM,+BAA+B,CAAC,CAACC,IAAI,CACnEN,GAAG,CAACO,QAAQ,IAAIA,QAAQ,CAACC,OAAO,CAAC,CAClC;IACH;IACA;IACA;IACA;IACAC,cAAcA,CAACC,KAAa;MAC1B,OAAO,IAAI,CAACP,UAAU,CAACE,GAAG,CAAY,sCAAsC,EAAE;QAAEK;MAAK,CAAE,CAAC;IAC1F;IAEAC,aAAaA,CAACC,EAAU;MACtB,OAAO,IAAI,CAACT,UAAU,CAACU,MAAM,CAAM,iCAAiCD,EAAE,EAAE,CAAC;IAC3E;;;yBAlBWX,cAAc,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;MAAA;IAAA;;;eAAdhB,cAAc;QAAAiB,OAAA,EAAdjB,cAAc,CAAAkB,IAAA;QAAAC,UAAA,EAFb;MAAM;IAAA;;SAEPnB,cAAc;AAAA;SAAdA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}