{"ast":null,"code":"import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/platform';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst _c0 = [\"*\"];\nconst _c1 = [\"content\"];\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2._onBackdropClicked());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-drawer-content\");\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c2 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c3 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2._onBackdropClicked());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-sidenav-content\");\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c4 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c5 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c6 = \".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);position:relative;z-index:4;--mat-sidenav-container-shape:0;color:var(--mat-sidenav-container-text-color);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\";\nconst matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: /*#__PURE__*/trigger('transform', [\n  /*#__PURE__*/\n  // We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', /*#__PURE__*/style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), /*#__PURE__*/state('void', /*#__PURE__*/style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), /*#__PURE__*/transition('void => open-instant', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('void <=> open, open-instant => void', /*#__PURE__*/animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = /*#__PURE__*/new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = /*#__PURE__*/new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\nlet MatDrawerContent = /*#__PURE__*/(() => {\n  class MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n      super(elementRef, scrollDispatcher, ngZone);\n      this._changeDetectorRef = _changeDetectorRef;\n      this._container = _container;\n    }\n    ngAfterContentInit() {\n      this._container._contentMarginChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    static {\n      this.ɵfac = function MatDrawerContent_Factory(t) {\n        return new (t || MatDrawerContent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatDrawerContent,\n        selectors: [[\"mat-drawer-content\"]],\n        hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-drawer-content\"],\n        hostVars: 4,\n        hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n          }\n        },\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkScrollable,\n          useExisting: MatDrawerContent\n        }]), i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 0,\n        template: function MatDrawerContent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatDrawerContent;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nlet MatDrawer = /*#__PURE__*/(() => {\n  class MatDrawer {\n    /** The side that the drawer is attached to. */\n    get position() {\n      return this._position;\n    }\n    set position(value) {\n      // Make sure we have a valid value.\n      value = value === 'end' ? 'end' : 'start';\n      if (value !== this._position) {\n        // Static inputs in Ivy are set before the element is in the DOM.\n        if (this._isAttached) {\n          this._updatePositionInParent(value);\n        }\n        this._position = value;\n        this.onPositionChanged.emit();\n      }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n      return this._mode;\n    }\n    set mode(value) {\n      this._mode = value;\n      this._updateFocusTrapState();\n      this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n      return this._disableClose;\n    }\n    set disableClose(value) {\n      this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n      const value = this._autoFocus;\n      // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n      // because we don't know how the sidenav is being used, but in some cases it still makes\n      // sense to do it. The consumer can explicitly set `autoFocus`.\n      if (value == null) {\n        if (this.mode === 'side') {\n          return 'dialog';\n        } else {\n          return 'first-tabbable';\n        }\n      }\n      return value;\n    }\n    set autoFocus(value) {\n      if (value === 'true' || value === 'false' || value == null) {\n        value = coerceBooleanProperty(value);\n      }\n      this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n      return this._opened;\n    }\n    set opened(value) {\n      this.toggle(coerceBooleanProperty(value));\n    }\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._focusMonitor = _focusMonitor;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._interactivityChecker = _interactivityChecker;\n      this._doc = _doc;\n      this._container = _container;\n      this._elementFocusedBeforeDrawerWasOpened = null;\n      /** Whether the drawer is initialized. Used for disabling the initial animation. */\n      this._enableAnimations = false;\n      this._position = 'start';\n      this._mode = 'over';\n      this._disableClose = false;\n      this._opened = false;\n      /** Emits whenever the drawer has started animating. */\n      this._animationStarted = new Subject();\n      /** Emits whenever the drawer is done animating. */\n      this._animationEnd = new Subject();\n      /** Current state of the sidenav animation. */\n      this._animationState = 'void';\n      /** Event emitted when the drawer open state is changed. */\n      this.openedChange =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter( /* isAsync */true);\n      /** Event emitted when the drawer has been opened. */\n      this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n      /** Event emitted when the drawer has started opening. */\n      this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n      /** Event emitted when the drawer has been closed. */\n      this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n      /** Event emitted when the drawer has started closing. */\n      this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n      /** Emits when the component is destroyed. */\n      this._destroyed = new Subject();\n      /** Event emitted when the drawer's position changes. */\n      // tslint:disable-next-line:no-output-on-prefix\n      this.onPositionChanged = new EventEmitter();\n      /**\n       * An observable that emits when the drawer mode changes. This is used by the drawer container to\n       * to know when to when the mode changes so it can adapt the margins on the content.\n       */\n      this._modeChanged = new Subject();\n      this.openedChange.subscribe(opened => {\n        if (opened) {\n          if (this._doc) {\n            this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n          }\n          this._takeFocus();\n        } else if (this._isFocusWithinDrawer()) {\n          this._restoreFocus(this._openedVia || 'program');\n        }\n      });\n      /**\n       * Listen to `keydown` events outside the zone so that change detection is not run every\n       * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n       * and we don't have close disabled.\n       */\n      this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n          return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n          this.close();\n          event.stopPropagation();\n          event.preventDefault();\n        }));\n      });\n      // We need a Subject with distinctUntilChanged, because the `done` event\n      // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n      this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n        return x.fromState === y.fromState && x.toState === y.toState;\n      })).subscribe(event => {\n        const {\n          fromState,\n          toState\n        } = event;\n        if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n          this.openedChange.emit(this._opened);\n        }\n      });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n      if (!this._interactivityChecker.isFocusable(element)) {\n        element.tabIndex = -1;\n        // The tabindex attribute should be removed to avoid navigating to that element again\n        this._ngZone.runOutsideAngular(() => {\n          const callback = () => {\n            element.removeEventListener('blur', callback);\n            element.removeEventListener('mousedown', callback);\n            element.removeAttribute('tabindex');\n          };\n          element.addEventListener('blur', callback);\n          element.addEventListener('mousedown', callback);\n        });\n      }\n      element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n      let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n      if (elementToFocus) {\n        this._forceFocus(elementToFocus, options);\n      }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n      if (!this._focusTrap) {\n        return;\n      }\n      const element = this._elementRef.nativeElement;\n      // When autoFocus is not on the sidenav, if the element cannot be focused or does\n      // not exist, focus the sidenav itself so the keyboard navigation still works.\n      // We need to check that `focus` is a function due to Universal.\n      switch (this.autoFocus) {\n        case false:\n        case 'dialog':\n          return;\n        case true:\n        case 'first-tabbable':\n          this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n              element.focus();\n            }\n          });\n          break;\n        case 'first-heading':\n          this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n          break;\n        default:\n          this._focusByCssSelector(this.autoFocus);\n          break;\n      }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n      if (this.autoFocus === 'dialog') {\n        return;\n      }\n      if (this._elementFocusedBeforeDrawerWasOpened) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n      this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n      const activeEl = this._doc.activeElement;\n      return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n      this._isAttached = true;\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      this._updateFocusTrapState();\n      // Only update the DOM position when the sidenav is positioned at\n      // the end since we project the sidenav before the content by default.\n      if (this._position === 'end') {\n        this._updatePositionInParent('end');\n      }\n    }\n    ngAfterContentChecked() {\n      // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n      // drawers that are open by default. When we're on the server, we shouldn't enable the\n      // animations, because we don't want the drawer to animate the first time the user sees\n      // the page.\n      if (this._platform.isBrowser) {\n        this._enableAnimations = true;\n      }\n    }\n    ngOnDestroy() {\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n      this._anchor?.remove();\n      this._anchor = null;\n      this._animationStarted.complete();\n      this._animationEnd.complete();\n      this._modeChanged.complete();\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n      return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n      return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n      // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n      // don't need to check whether focus is currently in the drawer, as clicking on the\n      // backdrop causes blurs the active element.\n      return this._setOpen( /* isOpen */false, /* restoreFocus */true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n      // If the focus is currently inside the drawer content and we are closing the drawer,\n      // restore the focus to the initially focused element (when the drawer opened).\n      if (isOpen && openedVia) {\n        this._openedVia = openedVia;\n      }\n      const result = this._setOpen(isOpen, /* restoreFocus */!isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n      if (!isOpen) {\n        this._openedVia = null;\n      }\n      return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n      this._opened = isOpen;\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n        if (restoreFocus) {\n          this._restoreFocus(focusOrigin);\n        }\n      }\n      this._updateFocusTrapState();\n      return new Promise(resolve => {\n        this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n      });\n    }\n    _getWidth() {\n      return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n      if (this._focusTrap) {\n        // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n        // sidenav content.\n        this._focusTrap.enabled = !!this._container?.hasBackdrop;\n      }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n      const element = this._elementRef.nativeElement;\n      const parent = element.parentNode;\n      if (newPosition === 'end') {\n        if (!this._anchor) {\n          this._anchor = this._doc.createComment('mat-drawer-anchor');\n          parent.insertBefore(this._anchor, element);\n        }\n        parent.appendChild(element);\n      } else if (this._anchor) {\n        this._anchor.parentNode.insertBefore(element, this._anchor);\n      }\n    }\n    static {\n      this.ɵfac = function MatDrawer_Factory(t) {\n        return new (t || MatDrawer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.FocusTrapFactory), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.InteractivityChecker), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatDrawer,\n        selectors: [[\"mat-drawer\"]],\n        viewQuery: function MatDrawer_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c1, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n          }\n        },\n        hostAttrs: [\"tabIndex\", \"-1\", \"ngSkipHydration\", \"\", 1, \"mat-drawer\"],\n        hostVars: 12,\n        hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n              return ctx._animationStarted.next($event);\n            })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n              return ctx._animationEnd.next($event);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"align\", null);\n            i0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n            i0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n          }\n        },\n        inputs: {\n          position: \"position\",\n          mode: \"mode\",\n          disableClose: \"disableClose\",\n          autoFocus: \"autoFocus\",\n          opened: \"opened\"\n        },\n        outputs: {\n          openedChange: \"openedChange\",\n          _openedStream: \"opened\",\n          openedStart: \"openedStart\",\n          _closedStream: \"closed\",\n          closedStart: \"closedStart\",\n          onPositionChanged: \"positionChanged\"\n        },\n        exportAs: [\"matDrawer\"],\n        ngContentSelectors: _c0,\n        decls: 3,\n        vars: 0,\n        consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"], [\"content\", \"\"]],\n        template: function MatDrawer_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"div\", 0, 1);\n            i0.ɵɵprojection(2);\n            i0.ɵɵelementEnd();\n          }\n        },\n        dependencies: [i1.CdkScrollable],\n        encapsulation: 2,\n        data: {\n          animation: [matDrawerAnimations.transformDrawer]\n        },\n        changeDetection: 0\n      });\n    }\n  }\n  return MatDrawer;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nlet MatDrawerContainer = /*#__PURE__*/(() => {\n  class MatDrawerContainer {\n    /** The drawer child with the `start` position. */\n    get start() {\n      return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n      return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n      return this._autosize;\n    }\n    set autosize(value) {\n      this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n      return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n      this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n      return this._userContent || this._content;\n    }\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n      this._dir = _dir;\n      this._element = _element;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._animationMode = _animationMode;\n      /** Drawers that belong to this container. */\n      this._drawers = new QueryList();\n      /** Event emitted when the drawer backdrop is clicked. */\n      this.backdropClick = new EventEmitter();\n      /** Emits when the component is destroyed. */\n      this._destroyed = new Subject();\n      /** Emits on every ngDoCheck. Used for debouncing reflows. */\n      this._doCheckSubject = new Subject();\n      /**\n       * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n       * drawer is open. We use margin rather than transform even for push mode because transform breaks\n       * fixed position elements inside of the transformed element.\n       */\n      this._contentMargins = {\n        left: null,\n        right: null\n      };\n      this._contentMarginChanges = new Subject();\n      // If a `Dir` directive exists up the tree, listen direction changes\n      // and update the left/right properties to point to the proper start/end.\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n          this._validateDrawers();\n          this.updateContentMargins();\n        });\n      }\n      // Since the minimum width of the sidenav depends on the viewport width,\n      // we need to recompute the margins if the viewport changes.\n      viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n      this._autosize = defaultAutosize;\n    }\n    ngAfterContentInit() {\n      this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(drawer => {\n        this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n        this._drawers.notifyOnChanges();\n      });\n      this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n        this._validateDrawers();\n        this._drawers.forEach(drawer => {\n          this._watchDrawerToggle(drawer);\n          this._watchDrawerPosition(drawer);\n          this._watchDrawerMode(drawer);\n        });\n        if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {\n          this.updateContentMargins();\n        }\n        this._changeDetectorRef.markForCheck();\n      });\n      // Avoid hitting the NgZone through the debounce timeout.\n      this._ngZone.runOutsideAngular(() => {\n        this._doCheckSubject.pipe(debounceTime(10),\n        // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n      });\n    }\n    ngOnDestroy() {\n      this._contentMarginChanges.complete();\n      this._doCheckSubject.complete();\n      this._drawers.destroy();\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n      this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n      this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n      // 1. For drawers in `over` mode, they don't affect the content.\n      // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n      //    left margin (for left drawer) or right margin (for right the drawer).\n      // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n      //    adding to the left or right margin and simultaneously subtracting the same amount of\n      //    margin from the other side.\n      let left = 0;\n      let right = 0;\n      if (this._left && this._left.opened) {\n        if (this._left.mode == 'side') {\n          left += this._left._getWidth();\n        } else if (this._left.mode == 'push') {\n          const width = this._left._getWidth();\n          left += width;\n          right -= width;\n        }\n      }\n      if (this._right && this._right.opened) {\n        if (this._right.mode == 'side') {\n          right += this._right._getWidth();\n        } else if (this._right.mode == 'push') {\n          const width = this._right._getWidth();\n          right += width;\n          left -= width;\n        }\n      }\n      // If either `right` or `left` is zero, don't set a style to the element. This\n      // allows users to specify a custom size via CSS class in SSR scenarios where the\n      // measured widths will always be zero. Note that we reset to `null` here, rather\n      // than below, in order to ensure that the types in the `if` below are consistent.\n      left = left || null;\n      right = right || null;\n      if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n        this._contentMargins = {\n          left,\n          right\n        };\n        // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n        // to do it only when something changed, otherwise we can end up hitting the zone too often.\n        this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n      }\n    }\n    ngDoCheck() {\n      // If users opted into autosizing, do a check every change detection cycle.\n      if (this._autosize && this._isPushed()) {\n        // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n      }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n      drawer._animationStarted.pipe(filter(event => event.fromState !== event.toState), takeUntil(this._drawers.changes)).subscribe(event => {\n        // Set the transition class on the container so that the animations occur. This should not\n        // be set initially because animations should only be triggered via a change in state.\n        if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n          this._element.nativeElement.classList.add('mat-drawer-transition');\n        }\n        this.updateContentMargins();\n        this._changeDetectorRef.markForCheck();\n      });\n      if (drawer.mode !== 'side') {\n        drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n      }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n      if (!drawer) {\n        return;\n      }\n      // NOTE: We need to wait for the microtask queue to be empty before validating,\n      // since both drawers may be swapping positions at the same time.\n      drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n          this._validateDrawers();\n        });\n      });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n      if (drawer) {\n        drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n      const classList = this._element.nativeElement.classList;\n      const className = 'mat-drawer-container-has-open';\n      if (isAdd) {\n        classList.add(className);\n      } else {\n        classList.remove(className);\n      }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n      this._start = this._end = null;\n      // Ensure that we have at most one start and one end drawer.\n      this._drawers.forEach(drawer => {\n        if (drawer.position == 'end') {\n          if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDuplicatedDrawerError('end');\n          }\n          this._end = drawer;\n        } else {\n          if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDuplicatedDrawerError('start');\n          }\n          this._start = drawer;\n        }\n      });\n      this._right = this._left = null;\n      // Detect if we're LTR or RTL.\n      if (this._dir && this._dir.value === 'rtl') {\n        this._left = this._end;\n        this._right = this._start;\n      } else {\n        this._left = this._start;\n        this._right = this._end;\n      }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n      return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n    }\n    _onBackdropClicked() {\n      this.backdropClick.emit();\n      this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n      // Close all open drawers where closing is not disabled and the mode is not `side`.\n      [this._start, this._end].filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer)).forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n      return this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start) || this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end);\n    }\n    _isDrawerOpen(drawer) {\n      return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n      if (this._backdropOverride == null) {\n        return !!drawer && drawer.mode !== 'side';\n      }\n      return this._backdropOverride;\n    }\n    static {\n      this.ɵfac = function MatDrawerContainer_Factory(t) {\n        return new (t || MatDrawerContainer)(i0.ɵɵdirectiveInject(i4.Directionality, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatDrawerContainer,\n        selectors: [[\"mat-drawer-container\"]],\n        contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n            i0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n          }\n        },\n        viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(MatDrawerContent, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n          }\n        },\n        hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-drawer-container\"],\n        hostVars: 2,\n        hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n          }\n        },\n        inputs: {\n          autosize: \"autosize\",\n          hasBackdrop: \"hasBackdrop\"\n        },\n        outputs: {\n          backdropClick: \"backdropClick\"\n        },\n        exportAs: [\"matDrawerContainer\"],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_DRAWER_CONTAINER,\n          useExisting: MatDrawerContainer\n        }])],\n        ngContentSelectors: _c3,\n        decls: 4,\n        vars: 2,\n        consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n        template: function MatDrawerContainer_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c2);\n            i0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n            i0.ɵɵprojection(1);\n            i0.ɵɵprojection(2, 1);\n            i0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", !ctx._content);\n          }\n        },\n        dependencies: [i5.NgIf, MatDrawerContent],\n        styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);position:relative;z-index:4;--mat-sidenav-container-shape:0;color:var(--mat-sidenav-container-text-color);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatDrawerContainer;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSidenavContent = /*#__PURE__*/(() => {\n  class MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n      super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n    static {\n      this.ɵfac = function MatSidenavContent_Factory(t) {\n        return new (t || MatSidenavContent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSidenavContent,\n        selectors: [[\"mat-sidenav-content\"]],\n        hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n        hostVars: 4,\n        hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n          }\n        },\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkScrollable,\n          useExisting: MatSidenavContent\n        }]), i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 0,\n        template: function MatSidenavContent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSidenavContent;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSidenav = /*#__PURE__*/(() => {\n  class MatSidenav extends MatDrawer {\n    constructor() {\n      super(...arguments);\n      this._fixedInViewport = false;\n      this._fixedTopGap = 0;\n      this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n      return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n      this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n      return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n      this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n      return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n      this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */function () {\n        let ɵMatSidenav_BaseFactory;\n        return function MatSidenav_Factory(t) {\n          return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = i0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav);\n        };\n      }();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSidenav,\n        selectors: [[\"mat-sidenav\"]],\n        hostAttrs: [\"tabIndex\", \"-1\", \"ngSkipHydration\", \"\", 1, \"mat-drawer\", \"mat-sidenav\"],\n        hostVars: 17,\n        hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"align\", null);\n            i0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n            i0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n          }\n        },\n        inputs: {\n          fixedInViewport: \"fixedInViewport\",\n          fixedTopGap: \"fixedTopGap\",\n          fixedBottomGap: \"fixedBottomGap\"\n        },\n        exportAs: [\"matSidenav\"],\n        features: [i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c0,\n        decls: 3,\n        vars: 0,\n        consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"], [\"content\", \"\"]],\n        template: function MatSidenav_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"div\", 0, 1);\n            i0.ɵɵprojection(2);\n            i0.ɵɵelementEnd();\n          }\n        },\n        dependencies: [i1.CdkScrollable],\n        encapsulation: 2,\n        data: {\n          animation: [matDrawerAnimations.transformDrawer]\n        },\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSidenav;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSidenavContainer = /*#__PURE__*/(() => {\n  class MatSidenavContainer extends MatDrawerContainer {\n    constructor() {\n      super(...arguments);\n      this._allDrawers = undefined;\n      // We need an initializer here to avoid a TS error.\n      this._content = undefined;\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */function () {\n        let ɵMatSidenavContainer_BaseFactory;\n        return function MatSidenavContainer_Factory(t) {\n          return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer);\n        };\n      }();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSidenavContainer,\n        selectors: [[\"mat-sidenav-container\"]],\n        contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n            i0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n          }\n        },\n        hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n        hostVars: 2,\n        hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n          }\n        },\n        exportAs: [\"matSidenavContainer\"],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_DRAWER_CONTAINER,\n          useExisting: MatSidenavContainer\n        }]), i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c5,\n        decls: 4,\n        vars: 2,\n        consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n        template: function MatSidenavContainer_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c4);\n            i0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n            i0.ɵɵprojection(1);\n            i0.ɵɵprojection(2, 1);\n            i0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", !ctx._content);\n          }\n        },\n        dependencies: [i5.NgIf, MatSidenavContent],\n        styles: [_c6],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSidenavContainer;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSidenavModule = /*#__PURE__*/(() => {\n  class MatSidenavModule {\n    static {\n      this.ɵfac = function MatSidenavModule_Factory(t) {\n        return new (t || MatSidenavModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatSidenavModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [CommonModule, MatCommonModule, CdkScrollableModule, CdkScrollableModule, MatCommonModule]\n      });\n    }\n  }\n  return MatSidenavModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };","map":{"version":3,"names":["i1","CdkScrollable","CdkScrollableModule","i5","DOCUMENT","CommonModule","i0","InjectionToken","forwardRef","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","EventEmitter","Optional","Input","Output","ViewChild","QueryList","ContentChildren","ContentChild","NgModule","MatCommonModule","i2","i4","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","i3","Subject","fromEvent","merge","filter","map","mapTo","takeUntil","distinctUntilChanged","take","startWith","debounceTime","trigger","state","style","transition","animate","ANIMATION_MODULE_TYPE","_c0","_c1","MatDrawerContainer_div_0_Template","rf","ctx","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatDrawerContainer_div_0_Template_div_click_0_listener","ɵɵrestoreView","ctx_r2","ɵɵnextContext","ɵɵresetView","_onBackdropClicked","ɵɵelementEnd","ctx_r0","ɵɵclassProp","_isShowingBackdrop","MatDrawerContainer_mat_drawer_content_3_Template","ɵɵprojection","_c2","_c3","MatSidenavContainer_div_0_Template","MatSidenavContainer_div_0_Template_div_click_0_listener","MatSidenavContainer_mat_sidenav_content_3_Template","_c4","_c5","_c6","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","constructor","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","ɵfac","MatDrawerContent_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","MatDrawerContainer","ElementRef","ScrollDispatcher","NgZone","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatDrawerContent_HostBindings","ɵɵstyleProp","_contentMargins","left","right","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatDrawerContent_Template","ɵɵprojectionDef","encapsulation","changeDetection","ngDevMode","MatDrawer","_position","value","_isAttached","_updatePositionInParent","onPositionChanged","emit","mode","_mode","_updateFocusTrapState","_modeChanged","next","disableClose","_disableClose","autoFocus","_autoFocus","opened","_opened","toggle","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_animationStarted","_animationEnd","_animationState","openedChange","_openedStream","pipe","o","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","nativeElement","event","keyCode","run","close","stopPropagation","preventDefault","x","y","_forceFocus","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","_anchor","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","MatDrawer_Factory","FocusTrapFactory","FocusMonitor","Platform","InteractivityChecker","viewQuery","MatDrawer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_content","first","MatDrawer_HostBindings","ɵɵsyntheticHostListener","MatDrawer_animation_transform_start_HostBindingHandler","$event","MatDrawer_animation_transform_done_HostBindingHandler","ɵɵattribute","ɵɵsyntheticHostProperty","inputs","outputs","exportAs","consts","MatDrawer_Template","dependencies","data","animation","start","_start","end","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","scrollable","_userContent","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_allDrawers","changes","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","_closeModalDrawersViaBackdrop","MatDrawerContainer_Factory","Directionality","ViewportRuler","contentQueries","MatDrawerContainer_ContentQueries","dirIndex","ɵɵcontentQuery","MatDrawerContainer_Query","MatDrawerContainer_HostBindings","MatDrawerContainer_Template","ɵɵtemplate","ɵɵproperty","ɵɵadvance","NgIf","styles","MatSidenavContent","changeDetectorRef","container","MatSidenavContent_Factory","MatSidenavContainer","MatSidenavContent_HostBindings","MatSidenavContent_Template","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","ɵMatSidenav_BaseFactory","MatSidenav_Factory","ɵɵgetInheritedFactory","MatSidenav_HostBindings","MatSidenav_Template","ɵMatSidenavContainer_BaseFactory","MatSidenavContainer_Factory","MatSidenavContainer_ContentQueries","MatSidenavContainer_HostBindings","MatSidenavContainer_Template","MatSidenavModule","MatSidenavModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports"],"sources":["C:/Users/GHAZI/Desktop/Back Up - Copie - Copie/back-office/node_modules/@angular/material/fesm2022/sidenav.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/platform';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDrawerContent, selector: \"mat-drawer-content\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                        'ngSkipHydration': '',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatDrawerContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }]; } });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n                    if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                        element.focus();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDrawer, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\", \"ngSkipHydration\": \"\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                        'ngSkipHydration': '',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDrawerContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DRAWER_CONTAINER]\n                }] }]; }, propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDrawerContainer, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);position:relative;z-index:4;--mat-sidenav-container-shape:0;color:var(--mat-sidenav-container-text-color);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        'ngSkipHydration': '',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);position:relative;z-index:4;--mat-sidenav-container-shape:0;color:var(--mat-sidenav-container-text-color);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: function () { return [{ type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSidenavContent, selector: \"mat-sidenav-content\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                        'ngSkipHydration': '',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatSidenavContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }]; } });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSidenav, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\", \"ngSkipHydration\": \"\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                        'ngSkipHydration': '',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    constructor() {\n        super(...arguments);\n        this._allDrawers = undefined;\n        // We need an initializer here to avoid a TS error.\n        this._content = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSidenavContainer, selector: \"mat-sidenav-container\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);position:relative;z-index:4;--mat-sidenav-container-shape:0;color:var(--mat-sidenav-container-text-color);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        'ngSkipHydration': '',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);position:relative;z-index:4;--mat-sidenav-container-shape:0;color:var(--mat-sidenav-container-text-color);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavModule, declarations: [MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], imports: [CommonModule, MatCommonModule, CdkScrollableModule], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavModule, imports: [CommonModule, MatCommonModule, CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkScrollableModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    declarations: [\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}