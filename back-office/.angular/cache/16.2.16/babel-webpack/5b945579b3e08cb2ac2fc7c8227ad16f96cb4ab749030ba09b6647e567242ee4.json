{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/** @docs-private */\nconst _c0 = [\"mat-sort-header\", \"\"];\nfunction MatSortHeader_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._disableViewStateAnimation = true);\n    })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3._disableViewStateAnimation = false);\n    });\n    i0.ɵɵelement(1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"div\", 5);\n    i0.ɵɵelement(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n  }\n}\nconst _c1 = [\"*\"];\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = /*#__PURE__*/mixinInitialized( /*#__PURE__*/mixinDisabled(class {}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nlet MatSort = /*#__PURE__*/(() => {\n  class MatSort extends _MatSortBase {\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n      return this._direction;\n    }\n    set direction(direction) {\n      if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getSortInvalidDirectionError(direction);\n      }\n      this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overridden by the MatSortable's disable clear input.\n     */\n    get disableClear() {\n      return this._disableClear;\n    }\n    set disableClear(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n    constructor(_defaultOptions) {\n      super();\n      this._defaultOptions = _defaultOptions;\n      /** Collection of all registered sortables that this directive manages. */\n      this.sortables = new Map();\n      /** Used to notify any child components listening to state changes. */\n      this._stateChanges = new Subject();\n      /**\n       * The direction to set when an MatSortable is initially sorted.\n       * May be overridden by the MatSortable's sort start.\n       */\n      this.start = 'asc';\n      this._direction = '';\n      /** Event emitted when the user changes either the active sort or sort direction. */\n      this.sortChange = new EventEmitter();\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!sortable.id) {\n          throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n          throw getSortDuplicateSortableIdError(sortable.id);\n        }\n      }\n      this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n      this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n      this.sortChange.emit({\n        active: this.active,\n        direction: this.direction\n      });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n      if (!sortable) {\n        return '';\n      }\n      // Get the sort direction cycle with the potential sortable overrides.\n      const disableClear = sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n      let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n      // Get and return the next direction in the cycle\n      let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n      if (nextDirectionIndex >= sortDirectionCycle.length) {\n        nextDirectionIndex = 0;\n      }\n      return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n      this._markInitialized();\n    }\n    ngOnChanges() {\n      this._stateChanges.next();\n    }\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    static {\n      this.ɵfac = function MatSort_Factory(t) {\n        return new (t || MatSort)(i0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSort,\n        selectors: [[\"\", \"matSort\", \"\"]],\n        hostAttrs: [1, \"mat-sort\"],\n        inputs: {\n          disabled: [\"matSortDisabled\", \"disabled\"],\n          active: [\"matSortActive\", \"active\"],\n          start: [\"matSortStart\", \"start\"],\n          direction: [\"matSortDirection\", \"direction\"],\n          disableClear: [\"matSortDisableClear\", \"disableClear\"]\n        },\n        outputs: {\n          sortChange: \"matSortChange\"\n        },\n        exportAs: [\"matSort\"],\n        features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return MatSort;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n  let sortOrder = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n  return sortOrder;\n}\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n  /** Animation that moves the sort indicator. */\n  indicator: /*#__PURE__*/trigger('indicator', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(0px)'\n  })),\n  /*#__PURE__*/\n  // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(10px)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: /*#__PURE__*/trigger('leftPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: /*#__PURE__*/trigger('rightPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: /*#__PURE__*/trigger('arrowOpacity', [/*#__PURE__*/state('desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint', /*#__PURE__*/style({\n    opacity: 0.54\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', /*#__PURE__*/style({\n    opacity: 0\n  })),\n  /*#__PURE__*/\n  // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('* <=> *', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: /*#__PURE__*/trigger('arrowPosition', [\n  /*#__PURE__*/\n  // Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  })]))),\n  /*#__PURE__*/\n  // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })]))), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })), /*#__PURE__*/state('hint-to-asc, active-to-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }))]),\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: /*#__PURE__*/trigger('allowChildren', [/*#__PURE__*/transition('* <=> *', [/*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])])\n};\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nlet MatSortHeaderIntl = /*#__PURE__*/(() => {\n  class MatSortHeaderIntl {\n    constructor() {\n      /**\n       * Stream that emits whenever the labels here are changed. Use this to notify\n       * components if the labels have changed after initialization.\n       */\n      this.changes = new Subject();\n    }\n    static {\n      this.ɵfac = function MatSortHeaderIntl_Factory(t) {\n        return new (t || MatSortHeaderIntl)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MatSortHeaderIntl,\n        factory: MatSortHeaderIntl.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MatSortHeaderIntl;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = /*#__PURE__*/mixinDisabled(class {});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nlet MatSortHeader = /*#__PURE__*/(() => {\n  class MatSortHeader extends _MatSortHeaderBase {\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n      return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n      this._updateSortActionDescription(value);\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() {\n      return this._disableClear;\n    }\n    set disableClear(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef,\n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber, defaultOptions) {\n      // Note that we use a string token for the `_columnDef`, because the value is provided both by\n      // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n      // and we want to avoid having the sort header depending on the CDK table because\n      // of this single reference.\n      super();\n      this._intl = _intl;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._sort = _sort;\n      this._columnDef = _columnDef;\n      this._focusMonitor = _focusMonitor;\n      this._elementRef = _elementRef;\n      this._ariaDescriber = _ariaDescriber;\n      /**\n       * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n       * provide an affordance that the header is sortable by showing on focus and hover.\n       */\n      this._showIndicatorHint = false;\n      /**\n       * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n       * position through the animation. If animations are currently disabled, the fromState is removed\n       * so that there is no animation displayed.\n       */\n      this._viewState = {};\n      /** The direction the arrow should be facing according to the current state. */\n      this._arrowDirection = '';\n      /**\n       * Whether the view state animation should show the transition between the `from` and `to` states.\n       */\n      this._disableViewStateAnimation = false;\n      /** Sets the position of the arrow that displays when sorted. */\n      this.arrowPosition = 'after';\n      // Default the action description to \"Sort\" because it's better than nothing.\n      // Without a description, the button's label comes from the sort header text content,\n      // which doesn't give any indication that it performs a sorting operation.\n      this._sortActionDescription = 'Sort';\n      if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getSortHeaderNotContainedWithinSortError();\n      }\n      if (defaultOptions?.arrowPosition) {\n        this.arrowPosition = defaultOptions?.arrowPosition;\n      }\n      this._handleStateChanges();\n    }\n    ngOnInit() {\n      if (!this.id && this._columnDef) {\n        this.id = this._columnDef.name;\n      }\n      // Initialize the direction of the arrow and set the view state to be immediately that state.\n      this._updateArrowDirection();\n      this._setAnimationTransitionState({\n        toState: this._isSorted() ? 'active' : this._arrowDirection\n      });\n      this._sort.register(this);\n      this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n      this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n      // We use the focus monitor because we also want to style\n      // things differently based on the focus origin.\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n        const newState = !!origin;\n        if (newState !== this._showIndicatorHint) {\n          this._setIndicatorHintVisible(newState);\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      this._sort.deregister(this);\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n      // No-op if the sort header is disabled - should not make the hint visible.\n      if (this._isDisabled() && visible) {\n        return;\n      }\n      this._showIndicatorHint = visible;\n      if (!this._isSorted()) {\n        this._updateArrowDirection();\n        if (this._showIndicatorHint) {\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'hint'\n          });\n        } else {\n          this._setAnimationTransitionState({\n            fromState: 'hint',\n            toState: this._arrowDirection\n          });\n        }\n      }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n      this._viewState = viewState || {};\n      // If the animation for arrow position state (opacity/translation) should be disabled,\n      // remove the fromState so that it jumps right to the toState.\n      if (this._disableViewStateAnimation) {\n        this._viewState = {\n          toState: viewState.toState\n        };\n      }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n      this._sort.sort(this);\n      // Do not show the animation if the header was already shown in the right position.\n      if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = true;\n      }\n    }\n    _handleClick() {\n      if (!this._isDisabled()) {\n        this._sort.sort(this);\n      }\n    }\n    _handleKeydown(event) {\n      if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n        event.preventDefault();\n        this._toggleOnInteraction();\n      }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n      return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n      return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n      const fromState = this._viewState.fromState;\n      return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n      this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n      return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n      if (!this._isSorted()) {\n        return 'none';\n      }\n      return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n      return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n      // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n      // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n      // for every *cell* in the table, creating a lot of unnecessary noise.\n      // If _sortButton is undefined, the component hasn't been initialized yet so there's\n      // nothing to update in the DOM.\n      if (this._sortButton) {\n        // removeDescription will no-op if there is no existing message.\n        // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n        this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n        this._ariaDescriber?.describe(this._sortButton, newDescription);\n      }\n      this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n      this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n        if (this._isSorted()) {\n          this._updateArrowDirection();\n          // Do not show the animation if the header was already shown in the right position.\n          if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n          }\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'active'\n          });\n          this._showIndicatorHint = false;\n        }\n        // If this header was recently active and now no longer sorted, animate away the arrow.\n        if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = false;\n          this._setAnimationTransitionState({\n            fromState: 'active',\n            toState: this._arrowDirection\n          });\n        }\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    static {\n      this.ɵfac = function MatSortHeader_Factory(t) {\n        return new (t || MatSortHeader)(i0.ɵɵdirectiveInject(MatSortHeaderIntl), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MatSort, 8), i0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), i0.ɵɵdirectiveInject(i3.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.AriaDescriber, 8), i0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSortHeader,\n        selectors: [[\"\", \"mat-sort-header\", \"\"]],\n        hostAttrs: [1, \"mat-sort-header\"],\n        hostVars: 3,\n        hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n              return ctx._handleClick();\n            })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) {\n              return ctx._handleKeydown($event);\n            })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n              return ctx._setIndicatorHintVisible(true);\n            })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n              return ctx._setIndicatorHintVisible(false);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n            i0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n          }\n        },\n        inputs: {\n          disabled: \"disabled\",\n          id: [\"mat-sort-header\", \"id\"],\n          arrowPosition: \"arrowPosition\",\n          start: \"start\",\n          sortActionDescription: \"sortActionDescription\",\n          disableClear: \"disableClear\"\n        },\n        exportAs: [\"matSortHeader\"],\n        features: [i0.ɵɵInheritDefinitionFeature],\n        attrs: _c0,\n        ngContentSelectors: _c1,\n        decls: 4,\n        vars: 7,\n        consts: [[1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n        template: function MatSortHeader_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵprojection(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition === \"before\");\n            i0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0)(\"role\", ctx._isDisabled() ? null : \"button\");\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n          }\n        },\n        dependencies: [i4.NgIf],\n        styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n        encapsulation: 2,\n        data: {\n          animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n        },\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSortHeader;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSortModule = /*#__PURE__*/(() => {\n  class MatSortModule {\n    static {\n      this.ɵfac = function MatSortModule_Factory(t) {\n        return new (t || MatSortModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatSortModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n        imports: [CommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatSortModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Input","Output","Injectable","SkipSelf","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","i3","coerceBooleanProperty","SPACE","ENTER","mixinInitialized","mixinDisabled","AnimationDurations","AnimationCurves","MatCommonModule","Subject","merge","trigger","state","style","transition","animate","keyframes","query","animateChild","i4","CommonModule","_c0","MatSortHeader_div_3_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","_disableViewStateAnimation","MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener","ctx_r3","ɵɵelement","ɵɵelementEnd","ctx_r0","ɵɵproperty","_getArrowViewState","_getArrowDirectionState","ɵɵadvance","_c1","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MAT_SORT_DEFAULT_OPTIONS","_MatSortBase","MatSort","_direction","ngDevMode","disableClear","_disableClear","v","constructor","_defaultOptions","sortables","Map","_stateChanges","start","sortChange","register","sortable","has","set","deregister","delete","sort","active","getNextSortDirection","emit","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","ɵfac","MatSort_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","disabled","outputs","exportAs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","changes","MatSortHeaderIntl_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","_MatSortHeaderBase","MatSortHeader","sortActionDescription","_sortActionDescription","value","_updateSortActionDescription","_intl","_changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_ariaDescriber","defaultOptions","_showIndicatorHint","_viewState","_arrowDirection","_handleStateChanges","name","_updateArrowDirection","_setAnimationTransitionState","toState","_isSorted","_sortButton","nativeElement","querySelector","ngAfterViewInit","monitor","subscribe","origin","newState","_setIndicatorHintVisible","markForCheck","stopMonitoring","_rerenderSubscription","unsubscribe","visible","_isDisabled","fromState","viewState","_toggleOnInteraction","_handleClick","_handleKeydown","event","keyCode","preventDefault","_getAriaSortAttribute","_renderArrow","newDescription","removeDescription","describe","MatSortHeader_Factory","ChangeDetectorRef","FocusMonitor","ElementRef","AriaDescriber","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","MatSortHeader_HostBindings","MatSortHeader_click_HostBindingHandler","MatSortHeader_keydown_HostBindingHandler","$event","MatSortHeader_mouseenter_HostBindingHandler","MatSortHeader_mouseleave_HostBindingHandler","ɵɵattribute","ɵɵclassProp","attrs","ngContentSelectors","decls","vars","consts","template","MatSortHeader_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵtemplate","dependencies","NgIf","styles","encapsulation","data","animation","changeDetection","MatSortModule","MatSortModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports"],"sources":["C:/Users/GHAZI/Desktop/Back Up - Copie - Copie/back-office/node_modules/@angular/material/fesm2022/sort.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {\n}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortBase {\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        if (direction &&\n            direction !== 'asc' &&\n            direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overridden by the MatSortable's disable clear input.\n     */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overridden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSort, deps: [{ token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSort, selector: \"[matSort]\", inputs: { disabled: [\"matSortDisabled\", \"disabled\"], active: [\"matSortActive\", \"active\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"] }, outputs: { sortChange: \"matSortChange\" }, host: { classAttribute: \"mat-sort\" }, exportAs: [\"matSort\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSort, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSort]',\n                    exportAs: 'matSort',\n                    host: {\n                        'class': 'mat-sort',\n                    },\n                    inputs: ['disabled: matSortDisabled'],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SORT_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { active: [{\n                type: Input,\n                args: ['matSortActive']\n            }], start: [{\n                type: Input,\n                args: ['matSortStart']\n            }], direction: [{\n                type: Input,\n                args: ['matSortDirection']\n            }], disableClear: [{\n                type: Input,\n                args: ['matSortDisableClear']\n            }], sortChange: [{\n                type: Output,\n                args: ['matSortChange']\n            }] } });\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(-25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(25%)' })]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(-25%)' })]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),\n    ]),\n};\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortHeaderIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortHeaderIntl, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortHeaderIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = mixinDisabled(class {\n});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderBase {\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n        return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n        this._updateSortActionDescription(value);\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, \n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber, defaultOptions) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        // Default the action description to \"Sort\" because it's better than nothing.\n        // Without a description, the button's label comes from the sort header text content,\n        // which doesn't give any indication that it performs a sorting operation.\n        this._sortActionDescription = 'Sort';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        if (defaultOptions?.arrowPosition) {\n            this.arrowPosition = defaultOptions?.arrowPosition;\n        }\n        this._handleStateChanges();\n    }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({\n            toState: this._isSorted() ? 'active' : this._arrowDirection,\n        });\n        this._sort.register(this);\n        this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n        this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return (this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc'));\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n        // for every *cell* in the table, creating a lot of unnecessary noise.\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\n        // nothing to update in the DOM.\n        if (this._sortButton) {\n            // removeDescription will no-op if there is no existing message.\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n            this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n            this._ariaDescriber?.describe(this._sortButton, newDescription);\n        }\n        this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n                // Do not show the animation if the header was already shown in the right position.\n                if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = true;\n                }\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                this._showIndicatorHint = false;\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortHeader, deps: [{ token: MatSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: MatSort, optional: true }, { token: 'MAT_SORT_HEADER_COLUMN_DEF', optional: true }, { token: i3.FocusMonitor }, { token: i0.ElementRef }, { token: i3.AriaDescriber, optional: true }, { token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSortHeader, selector: \"[mat-sort-header]\", inputs: { disabled: \"disabled\", id: [\"mat-sort-header\", \"id\"], arrowPosition: \"arrowPosition\", start: \"start\", sortActionDescription: \"sortActionDescription\", disableClear: \"disableClear\" }, host: { listeners: { \"click\": \"_handleClick()\", \"keydown\": \"_handleKeydown($event)\", \"mouseenter\": \"_setIndicatorHintVisible(true)\", \"mouseleave\": \"_setIndicatorHintVisible(false)\" }, properties: { \"attr.aria-sort\": \"_getAriaSortAttribute()\", \"class.mat-sort-header-disabled\": \"_isDisabled()\" }, classAttribute: \"mat-sort-header\" }, exportAs: [\"matSortHeader\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition === 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"], dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortHeader, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-sort-header]', exportAs: 'matSortHeader', host: {\n                        'class': 'mat-sort-header',\n                        '(click)': '_handleClick()',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], animations: [\n                        matSortAnimations.indicator,\n                        matSortAnimations.leftPointer,\n                        matSortAnimations.rightPointer,\n                        matSortAnimations.arrowOpacity,\n                        matSortAnimations.arrowPosition,\n                        matSortAnimations.allowChildren,\n                    ], template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition === 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['MAT_SORT_HEADER_COLUMN_DEF']\n                }, {\n                    type: Optional\n                }] }, { type: i3.FocusMonitor }, { type: i0.ElementRef }, { type: i3.AriaDescriber, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SORT_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { id: [{\n                type: Input,\n                args: ['mat-sort-header']\n            }], arrowPosition: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], sortActionDescription: [{\n                type: Input\n            }], disableClear: [{\n                type: Input\n            }] } });\n\nclass MatSortModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortModule, declarations: [MatSort, MatSortHeader], imports: [CommonModule, MatCommonModule], exports: [MatSort, MatSortHeader] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortModule, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [CommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSortModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatSort, MatSortHeader],\n                    declarations: [MatSort, MatSortHeader],\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}