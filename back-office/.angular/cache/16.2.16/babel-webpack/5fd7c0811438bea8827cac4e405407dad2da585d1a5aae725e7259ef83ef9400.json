{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nlet BuzzService = /*#__PURE__*/(() => {\n  class BuzzService {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    // Method to fetch all buzz posts\n    getBuzzs(page = 0, size = 100, sortBy = 'createdAt', direction = 'DESC') {\n      return this.apiService.get('/api/admin/dashboard/buzzs', {\n        page,\n        size,\n        sortBy,\n        direction\n      });\n    }\n    // Method to search buzz posts based on a query string\n    // According to the API documentation, we only have specific endpoints and\n    // might need to adjust this based on actual implementation\n    searchBuzzs(query) {\n      return this.apiService.get('/api/admin/dashboard/buzzs/search', {\n        query\n      });\n    }\n    deleteBuzz(id) {\n      return this.apiService.delete(`/api/admin/dashboard/buzzs/${id}`);\n    }\n    static {\n      this.ɵfac = function BuzzService_Factory(t) {\n        return new (t || BuzzService)(i0.ɵɵinject(i1.ApiService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: BuzzService,\n        factory: BuzzService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BuzzService;\n})();\nexport { BuzzService };","map":{"version":3,"names":["BuzzService","constructor","apiService","getBuzzs","page","size","sortBy","direction","get","searchBuzzs","query","deleteBuzz","id","delete","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\GHAZI\\Desktop\\Back Up - Copie - Copie\\back-office\\src\\app\\core\\services\\buzz.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { Buzz } from '../models/buzz.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BuzzService {\n  constructor(private apiService: ApiService) { }\n\n  // Method to fetch all buzz posts\n  getBuzzs(page: number = 0, size: number = 100, sortBy: string = 'createdAt', direction: string = 'DESC'): Observable<any> {\n    return this.apiService.get<any>('/api/admin/dashboard/buzzs', { page, size, sortBy, direction });\n  }\n\n  // Method to search buzz posts based on a query string\n  // According to the API documentation, we only have specific endpoints and\n  // might need to adjust this based on actual implementation\n  searchBuzzs(query: string): Observable<Buzz[]> {\n    return this.apiService.get<Buzz[]>('/api/admin/dashboard/buzzs/search', { query });\n  }\n\n  deleteBuzz(id: string): Observable<any> {\n    return this.apiService.delete<any>(`/api/admin/dashboard/buzzs/${id}`);\n  }\n}\n"],"mappings":";;IAQaA,WAAW;EAHxB,MAGaA,WAAW;IACtBC,YAAoBC,UAAsB;MAAtB,KAAAA,UAAU,GAAVA,UAAU;IAAgB;IAE9C;IACAC,QAAQA,CAACC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,GAAG,EAAEC,MAAA,GAAiB,WAAW,EAAEC,SAAA,GAAoB,MAAM;MACrG,OAAO,IAAI,CAACL,UAAU,CAACM,GAAG,CAAM,4BAA4B,EAAE;QAAEJ,IAAI;QAAEC,IAAI;QAAEC,MAAM;QAAEC;MAAS,CAAE,CAAC;IAClG;IAEA;IACA;IACA;IACAE,WAAWA,CAACC,KAAa;MACvB,OAAO,IAAI,CAACR,UAAU,CAACM,GAAG,CAAS,mCAAmC,EAAE;QAAEE;MAAK,CAAE,CAAC;IACpF;IAEAC,UAAUA,CAACC,EAAU;MACnB,OAAO,IAAI,CAACV,UAAU,CAACW,MAAM,CAAM,8BAA8BD,EAAE,EAAE,CAAC;IACxE;;;yBAjBWZ,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;MAAA;IAAA;;;eAAXjB,WAAW;QAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;QAAAC,UAAA,EAFV;MAAM;IAAA;;SAEPpB,WAAW;AAAA;SAAXA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}