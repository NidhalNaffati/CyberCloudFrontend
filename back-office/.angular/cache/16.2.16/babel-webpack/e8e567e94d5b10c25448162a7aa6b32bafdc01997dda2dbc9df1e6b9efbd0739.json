{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.action());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.data.action, \" \");\n  }\n}\nconst _c0 = [\"label\"];\nfunction MatSnackBarContainer_ng_template_4_Template(rf, ctx) {}\nconst MAX_TIMEOUT = /*#__PURE__*/Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n      this.dismiss();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction() {\n    return this._onAction;\n  }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = /*#__PURE__*/new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    this.duration = 0;\n    /** Data being injected into the child component. */\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n    this.verticalPosition = 'bottom';\n  }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nlet MatSnackBarLabel = /*#__PURE__*/(() => {\n  class MatSnackBarLabel {\n    static {\n      this.ɵfac = function MatSnackBarLabel_Factory(t) {\n        return new (t || MatSnackBarLabel)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSnackBarLabel,\n        selectors: [[\"\", \"matSnackBarLabel\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-snack-bar-label\", \"mdc-snackbar__label\"]\n      });\n    }\n  }\n  return MatSnackBarLabel;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nlet MatSnackBarActions = /*#__PURE__*/(() => {\n  class MatSnackBarActions {\n    static {\n      this.ɵfac = function MatSnackBarActions_Factory(t) {\n        return new (t || MatSnackBarActions)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSnackBarActions,\n        selectors: [[\"\", \"matSnackBarActions\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-snack-bar-actions\", \"mdc-snackbar__actions\"]\n      });\n    }\n  }\n  return MatSnackBarActions;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive that should be applied to each of the snack bar's action buttons. */\nlet MatSnackBarAction = /*#__PURE__*/(() => {\n  class MatSnackBarAction {\n    static {\n      this.ɵfac = function MatSnackBarAction_Factory(t) {\n        return new (t || MatSnackBarAction)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSnackBarAction,\n        selectors: [[\"\", \"matSnackBarAction\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-snack-bar-action\", \"mdc-snackbar__action\"]\n      });\n    }\n  }\n  return MatSnackBarAction;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SimpleSnackBar = /*#__PURE__*/(() => {\n  class SimpleSnackBar {\n    constructor(snackBarRef, data) {\n      this.snackBarRef = snackBarRef;\n      this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n      return !!this.data.action;\n    }\n    static {\n      this.ɵfac = function SimpleSnackBar_Factory(t) {\n        return new (t || SimpleSnackBar)(i0.ɵɵdirectiveInject(MatSnackBarRef), i0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: SimpleSnackBar,\n        selectors: [[\"simple-snack-bar\"]],\n        hostAttrs: [1, \"mat-mdc-simple-snack-bar\"],\n        exportAs: [\"matSnackBar\"],\n        decls: 3,\n        vars: 2,\n        consts: [[\"matSnackBarLabel\", \"\"], [\"matSnackBarActions\", \"\", 4, \"ngIf\"], [\"matSnackBarActions\", \"\"], [\"mat-button\", \"\", \"matSnackBarAction\", \"\", 3, \"click\"]],\n        template: function SimpleSnackBar_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtext(1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.data.message, \"\\n\");\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n          }\n        },\n        dependencies: [i2.NgIf, i3.MatButton, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction],\n        styles: [\".mat-mdc-simple-snack-bar{display:flex}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return SimpleSnackBar;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void, * => hidden', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\nlet uniqueId = 0;\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nlet _MatSnackBarContainerBase = /*#__PURE__*/(() => {\n  class _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, /** The snack bar configuration. */\n    snackBarConfig) {\n      super();\n      this._ngZone = _ngZone;\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._platform = _platform;\n      this.snackBarConfig = snackBarConfig;\n      this._document = inject(DOCUMENT);\n      this._trackedModals = new Set();\n      /** The number of milliseconds to wait before announcing the snack bar's content. */\n      this._announceDelay = 150;\n      /** Whether the component has been destroyed. */\n      this._destroyed = false;\n      /** Subject for notifying that the snack bar has announced to screen readers. */\n      this._onAnnounce = new Subject();\n      /** Subject for notifying that the snack bar has exited from view. */\n      this._onExit = new Subject();\n      /** Subject for notifying that the snack bar has finished entering the view. */\n      this._onEnter = new Subject();\n      /** The state of the snack bar animations. */\n      this._animationState = 'void';\n      /** Unique ID of the aria-live element. */\n      this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n      /**\n       * Attaches a DOM portal to the snack bar container.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n      this.attachDomPortal = portal => {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachDomPortal(portal);\n        this._afterPortalAttached();\n        return result;\n      };\n      // Use aria-live rather than a live role like 'alert' or 'status'\n      // because NVDA and JAWS have show inconsistent behavior with live roles.\n      if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n        this._live = 'assertive';\n      } else if (snackBarConfig.politeness === 'off') {\n        this._live = 'off';\n      } else {\n        this._live = 'polite';\n      }\n      // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n      // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n      if (this._platform.FIREFOX) {\n        if (this._live === 'polite') {\n          this._role = 'status';\n        }\n        if (this._live === 'assertive') {\n          this._role = 'alert';\n        }\n      }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n      this._assertNotAttached();\n      const result = this._portalOutlet.attachComponentPortal(portal);\n      this._afterPortalAttached();\n      return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n      this._assertNotAttached();\n      const result = this._portalOutlet.attachTemplatePortal(portal);\n      this._afterPortalAttached();\n      return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n      const {\n        fromState,\n        toState\n      } = event;\n      if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n        this._completeExit();\n      }\n      if (toState === 'visible') {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        const onEnter = this._onEnter;\n        this._ngZone.run(() => {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n        this._changeDetectorRef.detectChanges();\n        this._screenReaderAnnounce();\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n      // It's common for snack bars to be opened by random outside calls like HTTP requests or\n      // errors. Run inside the NgZone to ensure that it functions correctly.\n      this._ngZone.run(() => {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n      });\n      return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n      this._destroyed = true;\n      this._clearFromModals();\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._ngZone.run(() => {\n          this._onExit.next();\n          this._onExit.complete();\n        });\n      });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n      const element = this._elementRef.nativeElement;\n      const panelClasses = this.snackBarConfig.panelClass;\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(cssClass => element.classList.add(cssClass));\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n      this._exposeToModals();\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n      // `LiveAnnouncer` and any other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const id = this._liveElementId;\n      const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      for (let i = 0; i < modals.length; i++) {\n        const modal = modals[i];\n        const ariaOwns = modal.getAttribute('aria-owns');\n        this._trackedModals.add(modal);\n        if (!ariaOwns) {\n          modal.setAttribute('aria-owns', id);\n        } else if (ariaOwns.indexOf(id) === -1) {\n          modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n        }\n      }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n      this._trackedModals.forEach(modal => {\n        const ariaOwns = modal.getAttribute('aria-owns');\n        if (ariaOwns) {\n          const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n          if (newValue.length > 0) {\n            modal.setAttribute('aria-owns', newValue);\n          } else {\n            modal.removeAttribute('aria-owns');\n          }\n        }\n      });\n      this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n      if (!this._announceTimeoutId) {\n        this._ngZone.runOutsideAngular(() => {\n          this._announceTimeoutId = setTimeout(() => {\n            const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n            const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n            if (inertElement && liveElement) {\n              // If an element in the snack bar content is focused before being moved\n              // track it and restore focus after moving to the live region.\n              let focusedElement = null;\n              if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n                focusedElement = document.activeElement;\n              }\n              inertElement.removeAttribute('aria-hidden');\n              liveElement.appendChild(inertElement);\n              focusedElement?.focus();\n              this._onAnnounce.next();\n              this._onAnnounce.complete();\n            }\n          }, this._announceDelay);\n        });\n      }\n    }\n    static {\n      this.ɵfac = function _MatSnackBarContainerBase_Factory(t) {\n        return new (t || _MatSnackBarContainerBase)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MatSnackBarConfig));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: _MatSnackBarContainerBase,\n        viewQuery: function _MatSnackBarContainerBase_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n          }\n        },\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return _MatSnackBarContainerBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nlet MatSnackBarContainer = /*#__PURE__*/(() => {\n  class MatSnackBarContainer extends _MatSnackBarContainerBase {\n    /** Applies the correct CSS class to the label based on its content. */\n    _afterPortalAttached() {\n      super._afterPortalAttached();\n      // Check to see if the attached component or template uses the MDC template structure,\n      // specifically the MDC label. If not, the container should apply the MDC label class to this\n      // component's label container, which will apply MDC's label styles to the attached view.\n      const label = this._label.nativeElement;\n      const labelClass = 'mdc-snackbar__label';\n      label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */function () {\n        let ɵMatSnackBarContainer_BaseFactory;\n        return function MatSnackBarContainer_Factory(t) {\n          return (ɵMatSnackBarContainer_BaseFactory || (ɵMatSnackBarContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSnackBarContainer)))(t || MatSnackBarContainer);\n        };\n      }();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSnackBarContainer,\n        selectors: [[\"mat-snack-bar-container\"]],\n        viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._label = _t.first);\n          }\n        },\n        hostAttrs: [1, \"mdc-snackbar\", \"mat-mdc-snack-bar-container\", \"mdc-snackbar--open\"],\n        hostVars: 1,\n        hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n              return ctx.onAnimationEnd($event);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n          }\n        },\n        features: [i0.ɵɵInheritDefinitionFeature],\n        decls: 6,\n        vars: 3,\n        consts: [[1, \"mdc-snackbar__surface\"], [1, \"mat-mdc-snack-bar-label\"], [\"label\", \"\"], [\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n        template: function MatSnackBarContainer_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2)(3, \"div\", 3);\n            i0.ɵɵtemplate(4, MatSnackBarContainer_ng_template_4_Template, 0, 0, \"ng-template\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(5, \"div\");\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(5);\n            i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role)(\"id\", ctx._liveElementId);\n          }\n        },\n        dependencies: [i3$1.CdkPortalOutlet],\n        styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"],\n        encapsulation: 2,\n        data: {\n          animation: [matSnackBarAnimations.snackBarState]\n        }\n      });\n    }\n  }\n  return MatSnackBarContainer;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSnackBarModule = /*#__PURE__*/(() => {\n  class MatSnackBarModule {\n    static {\n      this.ɵfac = function MatSnackBarModule_Factory(t) {\n        return new (t || MatSnackBarModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatSnackBarModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatSnackBarModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\nlet _MatSnackBarBase = /*#__PURE__*/(() => {\n  class _MatSnackBarBase {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n      const parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n      this._overlay = _overlay;\n      this._live = _live;\n      this._injector = _injector;\n      this._breakpointObserver = _breakpointObserver;\n      this._parentSnackBar = _parentSnackBar;\n      this._defaultConfig = _defaultConfig;\n      /**\n       * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n       * If there is a parent snack-bar service, all operations should delegate to that parent\n       * via `_openedSnackBarRef`.\n       */\n      this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n      return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n      const _config = {\n        ...this._defaultConfig,\n        ...config\n      };\n      // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n      _config.data = {\n        message,\n        action\n      };\n      // Since the snack bar has `role=\"alert\"`, we don't\n      // want to announce the same message twice.\n      if (_config.announcementMessage === message) {\n        _config.announcementMessage = undefined;\n      }\n      return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n    ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      const injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarConfig,\n          useValue: config\n        }]\n      });\n      const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n      const containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n      const config = {\n        ...new MatSnackBarConfig(),\n        ...this._defaultConfig,\n        ...userConfig\n      };\n      const overlayRef = this._createOverlay(config);\n      const container = this._attachSnackBarContainer(overlayRef, config);\n      const snackBarRef = new MatSnackBarRef(container, overlayRef);\n      if (content instanceof TemplateRef) {\n        const portal = new TemplatePortal(content, null, {\n          $implicit: config.data,\n          snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        const injector = this._createInjector(config, snackBarRef);\n        const portal = new ComponentPortal(content, undefined, injector);\n        const contentRef = container.attachComponentPortal(portal);\n        // We can't pass this via the injector, because the injector is created earlier.\n        snackBarRef.instance = contentRef.instance;\n      }\n      // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n        overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n      });\n      if (config.announcementMessage) {\n        // Wait until the snack bar contents have been announced then deliver this message.\n        container._onAnnounce.subscribe(() => {\n          this._live.announce(config.announcementMessage, config.politeness);\n        });\n      }\n      this._animateSnackBar(snackBarRef, config);\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(() => {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (this._openedSnackBarRef == snackBarRef) {\n          this._openedSnackBarRef = null;\n        }\n        if (config.announcementMessage) {\n          this._live.clear();\n        }\n      });\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(() => {\n          snackBarRef.containerInstance.enter();\n        });\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      }\n      // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n      const overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n      let positionStrategy = this._overlay.position().global();\n      // Set horizontal position.\n      const isRtl = config.direction === 'rtl';\n      const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      const isRight = !isLeft && config.horizontalPosition !== 'center';\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      }\n      // Set horizontal position.\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarRef,\n          useValue: snackBarRef\n        }, {\n          provide: MAT_SNACK_BAR_DATA,\n          useValue: config.data\n        }]\n      });\n    }\n    static {\n      this.ɵfac = function _MatSnackBarBase_Factory(t) {\n        return new (t || _MatSnackBarBase)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(_MatSnackBarBase, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: _MatSnackBarBase,\n        factory: _MatSnackBarBase.ɵfac\n      });\n    }\n  }\n  return _MatSnackBarBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nlet MatSnackBar = /*#__PURE__*/(() => {\n  class MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n      super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n      this.simpleSnackBarComponent = SimpleSnackBar;\n      this.snackBarContainerComponent = MatSnackBarContainer;\n      this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    static {\n      this.ɵfac = function MatSnackBar_Factory(t) {\n        return new (t || MatSnackBar)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MatSnackBar,\n        factory: MatSnackBar.ɵfac,\n        providedIn: MatSnackBarModule\n      });\n    }\n  }\n  return MatSnackBar;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };","map":{"version":3,"names":["i0","InjectionToken","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","inject","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","Subject","i2","DOCUMENT","CommonModule","i3","MatButtonModule","trigger","state","style","transition","animate","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i1","take","takeUntil","i2$1","i3$2","Breakpoints","i1$1","OverlayModule","OverlayConfig","MatCommonModule","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate1","data","_c0","MatSnackBarContainer_ng_template_4_Template","MAX_TIMEOUT","Math","pow","MatSnackBarRef","constructor","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","MatSnackBarLabel","ɵfac","MatSnackBarLabel_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","ngDevMode","MatSnackBarActions","MatSnackBarActions_Factory","MatSnackBarAction","MatSnackBarAction_Factory","SimpleSnackBar","snackBarRef","hasAction","SimpleSnackBar_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","exportAs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","dependencies","NgIf","MatButton","styles","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","transform","opacity","uniqueId","_MatSnackBarContainerBase","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_document","_trackedModals","Set","_announceDelay","_destroyed","_onAnnounce","_animationState","_liveElementId","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","_clearFromModals","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","_exposeToModals","id","modals","querySelectorAll","i","length","modal","ariaOwns","getAttribute","indexOf","newValue","replace","trim","removeAttribute","clear","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","appendChild","focus","_MatSnackBarContainerBase_Factory","NgZone","ElementRef","ChangeDetectorRef","Platform","viewQuery","_MatSnackBarContainerBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer","label","_label","labelClass","toggle","ɵMatSnackBarContainer_BaseFactory","MatSnackBarContainer_Factory","ɵɵgetInheritedFactory","MatSnackBarContainer_Query","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","_MatSnackBarBase","_openedSnackBarRef","parent","_parentSnackBar","_snackBarRefAtThisLevel","value","_overlay","_injector","_breakpointObserver","_defaultConfig","openFromComponent","component","config","_attach","openFromTemplate","open","_config","undefined","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","handsetCssClass","matches","announce","_animateSnackBar","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","_MatSnackBarBase_Factory","ɵɵinject","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","ɵɵdefineInjectable","token","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig","MatSnackBar_Factory"],"sources":["C:/Users/GHAZI/Desktop/Back Up - Copie - Copie/back-office/node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\nlet uniqueId = 0;\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        this._document = inject(DOCUMENT);\n        this._trackedModals = new Set();\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /** Unique ID of the aria-live element. */\n        this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n        // `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    /** Applies the correct CSS class to the label based on its content. */\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarContainer, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], propDecorators: { _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\nclass MatSnackBarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, declarations: [SimpleSnackBar,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatCommonModule,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [\n                        MatCommonModule,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                    declarations: [\n                        SimpleSnackBar,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                }]\n        }] });\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\nclass _MatSnackBarBase {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarBase }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}