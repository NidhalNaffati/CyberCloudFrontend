{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst _c0 = [\"mat-menu-item\", \"\"];\nfunction MatMenuItem__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 3);\n    i0.ɵɵelement(1, \"polygon\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = [[[\"mat-icon\"], [\"\", \"matMenuItemIcon\", \"\"]], \"*\"];\nconst _c2 = [\"mat-icon, [matMenuItemIcon]\", \"*\"];\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4._onAnimationStart($event));\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5._onAnimationDone($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\nconst _c3 = [\"*\"];\nconst MAT_MENU_PANEL = /*#__PURE__*/new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinDisabled(class {}));\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nlet MatMenuItem = /*#__PURE__*/(() => {\n  class MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n      super();\n      this._elementRef = _elementRef;\n      this._document = _document;\n      this._focusMonitor = _focusMonitor;\n      this._parentMenu = _parentMenu;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** ARIA role for the menu item. */\n      this.role = 'menuitem';\n      /** Stream that emits when the menu item is hovered. */\n      this._hovered = new Subject();\n      /** Stream that emits when the menu item is focused. */\n      this._focused = new Subject();\n      /** Whether the menu item is highlighted. */\n      this._highlighted = false;\n      /** Whether the menu item acts as a trigger for a sub-menu. */\n      this._triggersSubmenu = false;\n      _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n      if (this._focusMonitor && origin) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n      } else {\n        this._getHostElement().focus(options);\n      }\n      this._focused.next(this);\n    }\n    ngAfterViewInit() {\n      if (this._focusMonitor) {\n        // Start monitoring the element, so it gets the appropriate focused classes. We want\n        // to show the focus style for menu items only when the focus was not caused by a\n        // mouse or touch interaction.\n        this._focusMonitor.monitor(this._elementRef, false);\n      }\n    }\n    ngOnDestroy() {\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n      if (this._parentMenu && this._parentMenu.removeItem) {\n        this._parentMenu.removeItem(this);\n      }\n      this._hovered.complete();\n      this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n      return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n      this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n      const clone = this._elementRef.nativeElement.cloneNode(true);\n      const icons = clone.querySelectorAll('mat-icon, .material-icons');\n      // Strip away icons, so they don't show up in the text.\n      for (let i = 0; i < icons.length; i++) {\n        icons[i].remove();\n      }\n      return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n      // We need to mark this for check for the case where the content is coming from a\n      // `matMenuContent` whose change detection tree is at the declaration position,\n      // not the insertion position. See #23175.\n      // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n      this._highlighted = isHighlighted;\n      this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n      // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n      this._triggersSubmenu = triggersSubmenu;\n      this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n      return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static {\n      this.ɵfac = function MatMenuItem_Factory(t) {\n        return new (t || MatMenuItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatMenuItem,\n        selectors: [[\"\", \"mat-menu-item\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-menu-item\", \"mat-mdc-focus-indicator\"],\n        hostVars: 8,\n        hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n              return ctx._checkDisabled($event);\n            })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n              return ctx._handleMouseEnter();\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled)(\"disabled\", ctx.disabled || null);\n            i0.ɵɵclassProp(\"mat-mdc-menu-item-highlighted\", ctx._highlighted)(\"mat-mdc-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n          }\n        },\n        inputs: {\n          disabled: \"disabled\",\n          disableRipple: \"disableRipple\",\n          role: \"role\"\n        },\n        exportAs: [\"matMenuItem\"],\n        features: [i0.ɵɵInheritDefinitionFeature],\n        attrs: _c0,\n        ngContentSelectors: _c2,\n        decls: 5,\n        vars: 3,\n        consts: [[1, \"mat-mdc-menu-item-text\"], [\"matRipple\", \"\", 1, \"mat-mdc-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-mdc-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-mdc-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n        template: function MatMenuItem_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c1);\n            i0.ɵɵprojection(0);\n            i0.ɵɵelementStart(1, \"span\", 0);\n            i0.ɵɵprojection(2, 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(3, \"div\", 1);\n            i0.ɵɵtemplate(4, MatMenuItem__svg_svg_4_Template, 2, 0, \"svg\", 2);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n          }\n        },\n        dependencies: [i2.NgIf, i3.MatRipple],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatMenuItem;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = /*#__PURE__*/new InjectionToken('MatMenuContent');\nlet _MatMenuContentBase = /*#__PURE__*/(() => {\n  class _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n      this._template = _template;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._document = _document;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Emits when the menu content has been attached. */\n      this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n      if (!this._portal) {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      }\n      this.detach();\n      if (!this._outlet) {\n        this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n      }\n      const element = this._template.elementRef.nativeElement;\n      // Because we support opening the same menu from different triggers (which in turn have their\n      // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n      // risk it staying attached to a pane that's no longer in the DOM.\n      element.parentNode.insertBefore(this._outlet.outletElement, element);\n      // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n      // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n      // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n      // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n      // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n      // @breaking-change 9.0.0 Make change detector ref required\n      this._changeDetectorRef?.markForCheck();\n      this._portal.attach(this._outlet, context);\n      this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n      if (this._portal.isAttached) {\n        this._portal.detach();\n      }\n    }\n    ngOnDestroy() {\n      if (this._outlet) {\n        this._outlet.dispose();\n      }\n    }\n    static {\n      this.ɵfac = function _MatMenuContentBase_Factory(t) {\n        return new (t || _MatMenuContentBase)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: _MatMenuContentBase\n      });\n    }\n  }\n  return _MatMenuContentBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Menu content that will be rendered lazily once the menu is opened. */\nlet MatMenuContent = /*#__PURE__*/(() => {\n  class MatMenuContent extends _MatMenuContentBase {\n    static {\n      this.ɵfac = /* @__PURE__ */function () {\n        let ɵMatMenuContent_BaseFactory;\n        return function MatMenuContent_Factory(t) {\n          return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent);\n        };\n      }();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatMenuContent,\n        selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_MENU_CONTENT,\n          useExisting: MatMenuContent\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatMenuContent;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: /*#__PURE__*/trigger('transformMenu', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), /*#__PURE__*/transition('void => enter', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))]),\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: /*#__PURE__*/trigger('fadeInItems', [\n  /*#__PURE__*/\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/transition('void => *', [/*#__PURE__*/style({\n    opacity: 0\n  }), /*#__PURE__*/animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/** Base class with all of the `MatMenu` functionality. */\nlet _MatMenuBase = /*#__PURE__*/(() => {\n  class _MatMenuBase {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n      return this._xPosition;\n    }\n    set xPosition(value) {\n      if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuInvalidPositionX();\n      }\n      this._xPosition = value;\n      this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n      return this._yPosition;\n    }\n    set yPosition(value) {\n      if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuInvalidPositionY();\n      }\n      this._yPosition = value;\n      this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n      return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n      this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n      return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n      const previousPanelClass = this._previousPanelClass;\n      if (previousPanelClass && previousPanelClass.length) {\n        previousPanelClass.split(' ').forEach(className => {\n          this._classList[className] = false;\n        });\n      }\n      this._previousPanelClass = classes;\n      if (classes && classes.length) {\n        classes.split(' ').forEach(className => {\n          this._classList[className] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n      return this.panelClass;\n    }\n    set classList(classes) {\n      this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, defaultOptions,\n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Only the direct descendant menu items. */\n      this._directDescendantItems = new QueryList();\n      /** Config object to be passed into the menu's ngClass */\n      this._classList = {};\n      /** Current state of the panel animation. */\n      this._panelAnimationState = 'void';\n      /** Emits whenever an animation on the menu completes. */\n      this._animationDone = new Subject();\n      /** Event emitted when the menu is closed. */\n      this.closed = new EventEmitter();\n      /**\n       * Event emitted when the menu is closed.\n       * @deprecated Switch to `closed` instead\n       * @breaking-change 8.0.0\n       */\n      this.close = this.closed;\n      this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n      this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n      this._xPosition = defaultOptions.xPosition;\n      this._yPosition = defaultOptions.yPosition;\n      this.backdropClass = defaultOptions.backdropClass;\n      this._overlapTrigger = defaultOptions.overlapTrigger;\n      this._hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n      this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n      this._updateDirectDescendants();\n      this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n      this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n      // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n      // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n      // is internal and we know that it gets completed on destroy.\n      this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n      this._directDescendantItems.changes.subscribe(itemsList => {\n        // Move focus to another item, if the active item is removed from the list.\n        // We need to debounce the callback, because multiple items might be removed\n        // in quick succession.\n        const manager = this._keyManager;\n        if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n          const items = itemsList.toArray();\n          const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n          if (items[index] && !items[index].disabled) {\n            manager.setActiveItem(index);\n          } else {\n            manager.setNextItemActive();\n          }\n        }\n      });\n    }\n    ngOnDestroy() {\n      this._keyManager?.destroy();\n      this._directDescendantItems.destroy();\n      this.closed.complete();\n      this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n      // Coerce the `changes` property because Angular types it as `Observable<any>`\n      const itemChanges = this._directDescendantItems.changes;\n      return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) {}\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) {}\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n      const keyCode = event.keyCode;\n      const manager = this._keyManager;\n      switch (keyCode) {\n        case ESCAPE:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n            this.closed.emit('keydown');\n          }\n          break;\n        case LEFT_ARROW:\n          if (this.parentMenu && this.direction === 'ltr') {\n            this.closed.emit('keydown');\n          }\n          break;\n        case RIGHT_ARROW:\n          if (this.parentMenu && this.direction === 'rtl') {\n            this.closed.emit('keydown');\n          }\n          break;\n        default:\n          if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n            manager.setFocusOrigin('keyboard');\n          }\n          manager.onKeydown(event);\n          return;\n      }\n      // Don't allow the event to propagate if we've already handled it, or it may\n      // end up reaching other overlays that were opened earlier (see #22694).\n      event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n      // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n      this._firstItemFocusSubscription?.unsubscribe();\n      this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        let menuPanel = null;\n        if (this._directDescendantItems.length) {\n          // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n          // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n          // because the panel is inside an `ng-template`. We work around it by starting from one of\n          // the items and walking up the DOM.\n          menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n        }\n        // If an item in the menuPanel is already focused, avoid overriding the focus.\n        if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n          const manager = this._keyManager;\n          manager.setFocusOrigin(origin).setFirstItemActive();\n          // If there's no active item at this point, it means that all the items are disabled.\n          // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n          // give _some_ feedback to screen readers.\n          if (!manager.activeItem && menuPanel) {\n            menuPanel.focus();\n          }\n        }\n      });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n      this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n      // The elevation starts at the base and increases by one for each level.\n      // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n      const elevation = Math.min(this._baseElevation + depth, 24);\n      const newElevation = `${this._elevationPrefix}${elevation}`;\n      const customElevation = Object.keys(this._classList).find(className => {\n        return className.startsWith(this._elevationPrefix);\n      });\n      if (!customElevation || customElevation === this._previousElevation) {\n        if (this._previousElevation) {\n          this._classList[this._previousElevation] = false;\n        }\n        this._classList[newElevation] = true;\n        this._previousElevation = newElevation;\n      }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n      const classes = this._classList;\n      classes['mat-menu-before'] = posX === 'before';\n      classes['mat-menu-after'] = posX === 'after';\n      classes['mat-menu-above'] = posY === 'above';\n      classes['mat-menu-below'] = posY === 'below';\n      // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n      this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n      // @breaking-change 8.0.0 Combine with _resetAnimation.\n      this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n      // @breaking-change 8.0.0 Combine with _startAnimation.\n      this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n      this._animationDone.next(event);\n      this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n      this._isAnimating = true;\n      // Scroll the content element to the top as soon as the animation starts. This is necessary,\n      // because we move focus to the first item while it's still being animated, which can throw\n      // the browser off when it determines the scroll position. Alternatively we can move focus\n      // when the animation is done, however moving focus asynchronously will interrupt screen\n      // readers which are in the process of reading out the menu already. We take the `element`\n      // from the `event` since we can't use a `ViewChild` to access the pane.\n      if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n        event.element.scrollTop = 0;\n      }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n      this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n    }\n    static {\n      this.ɵfac = function _MatMenuBase_Factory(t) {\n        return new (t || _MatMenuBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: _MatMenuBase,\n        contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n            i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n            i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allItems = _t);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n          }\n        },\n        viewQuery: function _MatMenuBase_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(TemplateRef, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n          }\n        },\n        inputs: {\n          backdropClass: \"backdropClass\",\n          ariaLabel: [\"aria-label\", \"ariaLabel\"],\n          ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n          ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n          xPosition: \"xPosition\",\n          yPosition: \"yPosition\",\n          overlapTrigger: \"overlapTrigger\",\n          hasBackdrop: \"hasBackdrop\",\n          panelClass: [\"class\", \"panelClass\"],\n          classList: \"classList\"\n        },\n        outputs: {\n          closed: \"closed\",\n          close: \"close\"\n        }\n      });\n    }\n  }\n  return _MatMenuBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatMenu = /*#__PURE__*/(() => {\n  class MatMenu extends _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, changeDetectorRef) {\n      super(_elementRef, _ngZone, _defaultOptions, changeDetectorRef);\n      this._elevationPrefix = 'mat-elevation-z';\n      this._baseElevation = 8;\n    }\n    static {\n      this.ɵfac = function MatMenu_Factory(t) {\n        return new (t || MatMenu)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatMenu,\n        selectors: [[\"mat-menu\"]],\n        hostAttrs: [\"ngSkipHydration\", \"\"],\n        hostVars: 3,\n        hostBindings: function MatMenu_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n          }\n        },\n        exportAs: [\"matMenu\"],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_MENU_PANEL,\n          useExisting: MatMenu\n        }]), i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c3,\n        decls: 1,\n        vars: 0,\n        consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-mdc-menu-panel\", \"mat-mdc-elevation-specific\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-mdc-menu-content\"]],\n        template: function MatMenu_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n          }\n        },\n        dependencies: [i2.NgClass],\n        styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n        encapsulation: 2,\n        data: {\n          animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n        },\n        changeDetection: 0\n      });\n    }\n  }\n  return MatMenu;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\nlet _MatMenuTriggerBase = /*#__PURE__*/(() => {\n  class _MatMenuTriggerBase {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n      return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n      this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n      return this._menu;\n    }\n    set menu(menu) {\n      if (menu === this._menu) {\n        return;\n      }\n      this._menu = menu;\n      this._menuCloseSubscription.unsubscribe();\n      if (menu) {\n        if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatMenuRecursiveError();\n        }\n        this._menuCloseSubscription = menu.close.subscribe(reason => {\n          this._destroyMenu(reason);\n          // If a click closed the menu, we should close the entire chain of nested menus.\n          if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n            this._parentMaterialMenu.closed.emit(reason);\n          }\n        });\n      }\n      this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu,\n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n      this._overlay = _overlay;\n      this._element = _element;\n      this._viewContainerRef = _viewContainerRef;\n      this._menuItemInstance = _menuItemInstance;\n      this._dir = _dir;\n      this._focusMonitor = _focusMonitor;\n      this._ngZone = _ngZone;\n      this._overlayRef = null;\n      this._menuOpen = false;\n      this._closingActionsSubscription = Subscription.EMPTY;\n      this._hoverSubscription = Subscription.EMPTY;\n      this._menuCloseSubscription = Subscription.EMPTY;\n      this._changeDetectorRef = inject(ChangeDetectorRef);\n      /**\n       * Handles touch start events on the trigger.\n       * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n       */\n      this._handleTouchStart = event => {\n        if (!isFakeTouchstartFromScreenReader(event)) {\n          this._openedBy = 'touch';\n        }\n      };\n      // Tracking input type is necessary so it's possible to only auto-focus\n      // the first item of the list when the menu is opened via the keyboard\n      this._openedBy = undefined;\n      /**\n       * Whether focus should be restored when the menu is closed.\n       * Note that disabling this option can have accessibility implications\n       * and it's up to you to manage focus, if you decide to turn it off.\n       */\n      this.restoreFocus = true;\n      /** Event emitted when the associated menu is opened. */\n      this.menuOpened = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is opened.\n       * @deprecated Switch to `menuOpened` instead\n       * @breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n      this.onMenuOpen = this.menuOpened;\n      /** Event emitted when the associated menu is closed. */\n      this.menuClosed = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is closed.\n       * @deprecated Switch to `menuClosed` instead\n       * @breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n      this.onMenuClose = this.menuClosed;\n      this._scrollStrategy = scrollStrategy;\n      this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n      _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n      this._handleHover();\n    }\n    ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n        this._overlayRef = null;\n      }\n      this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n      this._menuCloseSubscription.unsubscribe();\n      this._closingActionsSubscription.unsubscribe();\n      this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n      return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n      return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n      return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n      const menu = this.menu;\n      if (this._menuOpen || !menu) {\n        return;\n      }\n      const overlayRef = this._createOverlay(menu);\n      const overlayConfig = overlayRef.getConfig();\n      const positionStrategy = overlayConfig.positionStrategy;\n      this._setPosition(menu, positionStrategy);\n      overlayConfig.hasBackdrop = menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n      overlayRef.attach(this._getPortal(menu));\n      if (menu.lazyContent) {\n        menu.lazyContent.attach(this.menuData);\n      }\n      this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu(menu);\n      if (menu instanceof _MatMenuBase) {\n        menu._startAnimation();\n        menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n          // Re-adjust the position without locking when the amount of items\n          // changes so that the overlay is allowed to pick a new optimal position.\n          positionStrategy.withLockedPosition(false).reapplyLastPosition();\n          positionStrategy.withLockedPosition(true);\n        });\n      }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n      this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n      if (this._focusMonitor && origin) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n      this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n      if (!this._overlayRef || !this.menuOpen) {\n        return;\n      }\n      const menu = this.menu;\n      this._closingActionsSubscription.unsubscribe();\n      this._overlayRef.detach();\n      // Always restore focus if the user is navigating using the keyboard or the menu was opened\n      // programmatically. We don't restore for non-root triggers, because it can prevent focus\n      // from making it back to the root trigger when closing a long chain of menus by clicking\n      // on the backdrop.\n      if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n        this.focus(this._openedBy);\n      }\n      this._openedBy = undefined;\n      if (menu instanceof _MatMenuBase) {\n        menu._resetAnimation();\n        if (menu.lazyContent) {\n          // Wait for the exit animation to finish before detaching the content.\n          menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1),\n          // Interrupt if the content got re-attached.\n          takeUntil(menu.lazyContent._attached)).subscribe({\n            next: () => menu.lazyContent.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n        } else {\n          this._setIsMenuOpen(false);\n        }\n      } else {\n        this._setIsMenuOpen(false);\n        menu?.lazyContent?.detach();\n      }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n      menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n      menu.direction = this.dir;\n      this._setMenuElevation(menu);\n      menu.focusFirstItem(this._openedBy || 'program');\n      this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n      if (menu.setElevation) {\n        let depth = 0;\n        let parentMenu = menu.parentMenu;\n        while (parentMenu) {\n          depth++;\n          parentMenu = parentMenu.parentMenu;\n        }\n        menu.setElevation(depth);\n      }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n      if (isOpen !== this._menuOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n          this._menuItemInstance._setHighlighted(isOpen);\n        }\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n      if (!this._overlayRef) {\n        const config = this._getOverlayConfig(menu);\n        this._subscribeToPositions(menu, config.positionStrategy);\n        this._overlayRef = this._overlay.create(config);\n        // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n        // Ideally we'd also have our keyboard event logic in here, however doing so will\n        // break anybody that may have implemented the `MatMenuPanel` themselves.\n        this._overlayRef.keydownEvents().subscribe();\n      }\n      return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n      return new OverlayConfig({\n        positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n        backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n        panelClass: menu.overlayPanelClass,\n        scrollStrategy: this._scrollStrategy(),\n        direction: this._dir\n      });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n      if (menu.setPositionClasses) {\n        position.positionChanges.subscribe(change => {\n          const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n          // @breaking-change 15.0.0 Remove null check for `ngZone`.\n          // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n          // updating something in the view so we need to bring it back in.\n          if (this._ngZone) {\n            this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n          } else {\n            menu.setPositionClasses(posX, posY);\n          }\n        });\n      }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n      let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n      let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n      let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n      let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n      let offsetY = 0;\n      if (this.triggersSubmenu()) {\n        // When the menu is a sub-menu, it should always align itself\n        // to the edges of the trigger, instead of overlapping it.\n        overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n        originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n        if (this._parentMaterialMenu) {\n          if (this._parentInnerPadding == null) {\n            const firstItem = this._parentMaterialMenu.items.first;\n            this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n          }\n          offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n        }\n      } else if (!menu.overlapTrigger) {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n      positionStrategy.withPositions([{\n        originX,\n        originY,\n        overlayX,\n        overlayY,\n        offsetY\n      }, {\n        originX: originFallbackX,\n        originY,\n        overlayX: overlayFallbackX,\n        overlayY,\n        offsetY\n      }, {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n      const backdrop = this._overlayRef.backdropClick();\n      const detachments = this._overlayRef.detachments();\n      const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n      const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n      return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n      if (!isFakeMousedownFromScreenReader(event)) {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the menu as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : undefined;\n        // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the menu item.\n        if (this.triggersSubmenu()) {\n          event.preventDefault();\n        }\n      }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n      const keyCode = event.keyCode;\n      // Pressing enter on the trigger will trigger the click handler later.\n      if (keyCode === ENTER || keyCode === SPACE) {\n        this._openedBy = 'keyboard';\n      }\n      if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n        this._openedBy = 'keyboard';\n        this.openMenu();\n      }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n      if (this.triggersSubmenu()) {\n        // Stop event propagation to avoid closing the parent menu.\n        event.stopPropagation();\n        this.openMenu();\n      } else {\n        this.toggleMenu();\n      }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n        return;\n      }\n      this._hoverSubscription = this._parentMaterialMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n        this._openedBy = 'mouse';\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n      // Note that we can avoid this check by keeping the portal on the menu panel.\n      // While it would be cleaner, we'd have to introduce another required method on\n      // `MatMenuPanel`, making it harder to consume.\n      if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n        this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n      }\n      return this._portal;\n    }\n    static {\n      this.ɵfac = function _MatMenuTriggerBase_Factory(t) {\n        return new (t || _MatMenuTriggerBase)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(MatMenuItem, 10), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: _MatMenuTriggerBase,\n        hostVars: 3,\n        hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) {\n              return ctx._handleClick($event);\n            })(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) {\n              return ctx._handleMousedown($event);\n            })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) {\n              return ctx._handleKeydown($event);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-haspopup\", ctx.menu ? \"menu\" : null)(\"aria-expanded\", ctx.menuOpen)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n          }\n        },\n        inputs: {\n          _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n          menu: [\"matMenuTriggerFor\", \"menu\"],\n          menuData: [\"matMenuTriggerData\", \"menuData\"],\n          restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"]\n        },\n        outputs: {\n          menuOpened: \"menuOpened\",\n          onMenuOpen: \"onMenuOpen\",\n          menuClosed: \"menuClosed\",\n          onMenuClose: \"onMenuClose\"\n        }\n      });\n    }\n  }\n  return _MatMenuTriggerBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive applied to an element that should trigger a `mat-menu`. */\nlet MatMenuTrigger = /*#__PURE__*/(() => {\n  class MatMenuTrigger extends _MatMenuTriggerBase {\n    static {\n      this.ɵfac = /* @__PURE__ */function () {\n        let ɵMatMenuTrigger_BaseFactory;\n        return function MatMenuTrigger_Factory(t) {\n          return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger);\n        };\n      }();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatMenuTrigger,\n        selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-menu-trigger\"],\n        exportAs: [\"matMenuTrigger\"],\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatMenuTrigger;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatMenuModule = /*#__PURE__*/(() => {\n  class MatMenuModule {\n    static {\n      this.ɵfac = function MatMenuModule_Factory(t) {\n        return new (t || MatMenuModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatMenuModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n        imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule, MatCommonModule]\n      });\n    }\n  }\n  return MatMenuModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };","map":{"version":3,"names":["i0","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","Optional","Input","Directive","QueryList","EventEmitter","TemplateRef","ContentChildren","ViewChild","ContentChild","Output","inject","ChangeDetectorRef","Self","NgModule","i1","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","Subject","merge","Subscription","of","asapScheduler","startWith","switchMap","take","takeUntil","filter","delay","i3","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","i2","DOCUMENT","CommonModule","TemplatePortal","DomPortalOutlet","trigger","state","style","transition","animate","i3$1","i1$1","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","_c0","MatMenuItem__svg_svg_4_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","_c1","_c2","MatMenu_ng_template_0_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","MatMenu_ng_template_0_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","_handleKeydown","MatMenu_ng_template_0_Template_div_click_0_listener","ctx_r3","closed","emit","MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener","ctx_r4","_onAnimationStart","MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener","ctx_r5","_onAnimationDone","ɵɵprojection","ctx_r0","ɵɵproperty","panelId","_classList","_panelAnimationState","ɵɵattribute","ariaLabel","ariaLabelledby","ariaDescribedby","_c3","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","constructor","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","disabled","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","ɵfac","MatMenuItem_Factory","t","ɵɵdirectiveInject","ElementRef","FocusMonitor","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatMenuItem_HostBindings","MatMenuItem_click_HostBindingHandler","MatMenuItem_mouseenter_HostBindingHandler","ɵɵclassProp","inputs","disableRipple","exportAs","features","ɵɵInheritDefinitionFeature","attrs","ngContentSelectors","decls","vars","consts","template","MatMenuItem_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵadvance","dependencies","NgIf","MatRipple","encapsulation","changeDetection","ngDevMode","throwMatMenuInvalidPositionX","Error","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_CONTENT","_MatMenuContentBase","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","_MatMenuContentBase_Factory","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","ɵdir","ɵɵdefineDirective","MatMenuContent","ɵMatMenuContent_BaseFactory","MatMenuContent_Factory","ɵɵgetInheritedFactory","ɵɵProvidersFeature","provide","useExisting","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","_MatMenuBase","_xPosition","value","setPositionClasses","_yPosition","_overlapTrigger","hasBackdrop","_hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","_ngZone","defaultOptions","_directDescendantItems","_animationDone","close","overlayPanelClass","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","items","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","_firstItemFocusSubscription","unsubscribe","itemChanges","_item","keyCode","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","onStable","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","notifyOnChanges","_MatMenuBase_Factory","NgZone","contentQueries","_MatMenuBase_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","lazyContent","viewQuery","_MatMenuBase_Query","ɵɵviewQuery","templateRef","outputs","MatMenu","_defaultOptions","changeDetectorRef","MatMenu_Factory","MatMenu_HostBindings","MatMenu_Template","NgClass","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","passiveEventListenerOptions","passive","MENU_PANEL_TOP_PADDING","_MatMenuTriggerBase","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","_parentMaterialMenu","reason","_destroyMenu","_menuItemInstance","_overlay","_element","scrollStrategy","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","EMPTY","_hoverSubscription","_handleTouchStart","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","_MatMenuTriggerBase_Factory","Directionality","_MatMenuTriggerBase_HostBindings","_MatMenuTriggerBase_click_HostBindingHandler","_MatMenuTriggerBase_mousedown_HostBindingHandler","_MatMenuTriggerBase_keydown_HostBindingHandler","MatMenuTrigger","ɵMatMenuTrigger_BaseFactory","MatMenuTrigger_Factory","MatMenuModule","MatMenuModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports"],"sources":["C:/Users/GHAZI/Desktop/Back Up - Copie - Copie/back-office/node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuContentBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent extends _MatMenuContentBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this._overlapTrigger = defaultOptions.overlapTrigger;\n        this._hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusSubscription?.unsubscribe();\n        this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\nclass MatMenu extends _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, changeDetectorRef) {\n        super(_elementRef, _ngZone, _defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 8;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenu, selector: \"mat-menu\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        'ngSkipHydration': '',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\nclass _MatMenuTriggerBase {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof _MatMenuBase) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }]; }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\nclass MatMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}