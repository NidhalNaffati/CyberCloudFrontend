{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nconst _c0 = [\"*\"];\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (typeof window !== 'undefined') {\n      const ttWindow = window;\n      if (ttWindow.trustedTypes !== undefined) {\n        policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n          createHTML: s => s\n        });\n      }\n    }\n  }\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  constructor(url, svgText, options) {\n    this.url = url;\n    this.svgText = svgText;\n    this.options = options;\n  }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nlet MatIconRegistry = /*#__PURE__*/(() => {\n  class MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n      this._httpClient = _httpClient;\n      this._sanitizer = _sanitizer;\n      this._errorHandler = _errorHandler;\n      /**\n       * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n       */\n      this._svgIconConfigs = new Map();\n      /**\n       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n       * Multiple icon sets can be registered under the same namespace.\n       */\n      this._iconSetConfigs = new Map();\n      /** Cache for icons loaded by direct URLs. */\n      this._cachedIconsByUrl = new Map();\n      /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n      this._inProgressUrlFetches = new Map();\n      /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n      this._fontCssClassesByAlias = new Map();\n      /** Registered icon resolver functions. */\n      this._resolvers = [];\n      /**\n       * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n       * specified. The default 'material-icons' value assumes that the material icon font has been\n       * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\n       */\n      this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n      this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n      return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n      return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n      this._resolvers.push(resolver);\n      return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n      const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n      // TODO: add an ngDevMode check\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      // Security: The literal is passed in as SafeHtml, and is thus trusted.\n      const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n      return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n      return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n      const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      // Security: The literal is passed in as SafeHtml, and is thus trusted.\n      const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n      this._fontCssClassesByAlias.set(alias, classNames);\n      return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n      this._defaultFontSetClass = classNames;\n      return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n      const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n      const cachedIcon = this._cachedIconsByUrl.get(url);\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n      const key = iconKey(namespace, name);\n      let config = this._svgIconConfigs.get(key);\n      // Return (copy of) cached icon if possible.\n      if (config) {\n        return this._getSvgFromConfig(config);\n      }\n      // Otherwise try to resolve the config from one of the resolver functions.\n      config = this._getIconConfigFromResolvers(namespace, name);\n      if (config) {\n        this._svgIconConfigs.set(key, config);\n        return this._getSvgFromConfig(config);\n      }\n      // See if we have any icon sets registered for the namespace.\n      const iconSetConfigs = this._iconSetConfigs.get(namespace);\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n      this._resolvers = [];\n      this._svgIconConfigs.clear();\n      this._iconSetConfigs.clear();\n      this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n      if (config.svgText) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(this._svgElementFromConfig(config)));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n      // requested name.\n      const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      }\n      // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n      // fetched, fetch them now and look for iconName in the results.\n      const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgText).map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(err => {\n          const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n          // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n          const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n          this._errorHandler.handleError(new Error(errorMessage));\n          return of(null);\n        }));\n      });\n      // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n      return forkJoin(iconSetFetchRequests).pipe(map(() => {\n        const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        // TODO: add an ngDevMode check\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n        const config = iconSetConfigs[i];\n        // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n        // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n        // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n        // some of the parsing.\n        if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n          const svg = this._svgElementFromConfig(config);\n          const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n      return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n      if (config.svgText) {\n        return of(null);\n      }\n      return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n      // Use the `id=\"iconName\"` syntax in order to escape special\n      // characters in the ID (versus using the #iconName syntax).\n      const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n      if (!iconSource) {\n        return null;\n      }\n      // Clone the element and remove the ID to prevent multiple elements from being added\n      // to the page with the same ID.\n      const iconElement = iconSource.cloneNode(true);\n      iconElement.removeAttribute('id');\n      // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(iconElement, options);\n      }\n      // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n      }\n      // createElement('SVG') doesn't work as expected; the DOM ends up with\n      // the correct nodes, but the SVG content doesn't render. Instead we\n      // have to create an empty SVG node using innerHTML and append its content.\n      // Elements created using DOMParser.parseFromString have the same problem.\n      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n      const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n      // Clone the node so we don't remove it from the parent icon set element.\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n      const div = this._document.createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg');\n      // TODO: add an ngDevMode check\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n      const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n      const attributes = element.attributes;\n      // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n      for (let i = 0; i < attributes.length; i++) {\n        const {\n          name,\n          value\n        } = attributes[i];\n        if (name !== 'id') {\n          svg.setAttribute(name, value);\n        }\n      }\n      for (let i = 0; i < element.childNodes.length; i++) {\n        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[i].cloneNode(true));\n        }\n      }\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n      if (options && options.viewBox) {\n        svg.setAttribute('viewBox', options.viewBox);\n      }\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n      const {\n        url: safeUrl,\n        options\n      } = iconConfig;\n      const withCredentials = options?.withCredentials ?? false;\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      }\n      // TODO: add an ngDevMode check\n      if (safeUrl == null) {\n        throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n      }\n      const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n      // TODO: add an ngDevMode check\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n      // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n      // already a request in progress for that URL. It's necessary to call share() on the\n      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n      const inProgressFetch = this._inProgressUrlFetches.get(url);\n      if (inProgressFetch) {\n        return inProgressFetch;\n      }\n      const req = this._httpClient.get(url, {\n        responseType: 'text',\n        withCredentials\n      }).pipe(map(svg => {\n        // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n        // trusted HTML.\n        return trustedHTMLFromString(svg);\n      }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n      this._inProgressUrlFetches.set(url, req);\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n      return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n      const configNamespace = this._iconSetConfigs.get(namespace);\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n      return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n      if (!config.svgElement) {\n        const svg = this._svgElementFromString(config.svgText);\n        this._setSvgAttributes(svg, config.options);\n        config.svgElement = svg;\n      }\n      return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n      for (let i = 0; i < this._resolvers.length; i++) {\n        const result = this._resolvers[i](name, namespace);\n        if (result) {\n          return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n        }\n      }\n      return undefined;\n    }\n    static {\n      this.ɵfac = function MatIconRegistry_Factory(t) {\n        return new (t || MatIconRegistry)(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MatIconRegistry,\n        factory: MatIconRegistry.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MatIconRegistry;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatIconRegistry], [/*#__PURE__*/new Optional(), HttpClient], DomSanitizer, ErrorHandler, [/*#__PURE__*/new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = /*#__PURE__*/mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = /*#__PURE__*/new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = /*#__PURE__*/ /*#__PURE__*/funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nlet MatIcon = /*#__PURE__*/(() => {\n  class MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n      return this._inline;\n    }\n    set inline(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n      return this._svgIcon;\n    }\n    set svgIcon(value) {\n      if (value !== this._svgIcon) {\n        if (value) {\n          this._updateSvgIcon(value);\n        } else if (this._svgIcon) {\n          this._clearSvgElement();\n        }\n        this._svgIcon = value;\n      }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n      return this._fontSet;\n    }\n    set fontSet(value) {\n      const newValue = this._cleanupFontValue(value);\n      if (newValue !== this._fontSet) {\n        this._fontSet = newValue;\n        this._updateFontIconClasses();\n      }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n      return this._fontIcon;\n    }\n    set fontIcon(value) {\n      const newValue = this._cleanupFontValue(value);\n      if (newValue !== this._fontIcon) {\n        this._fontIcon = newValue;\n        this._updateFontIconClasses();\n      }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n      super(elementRef);\n      this._iconRegistry = _iconRegistry;\n      this._location = _location;\n      this._errorHandler = _errorHandler;\n      this._inline = false;\n      this._previousFontSetClass = [];\n      /** Subscription to the current in-progress SVG icon request. */\n      this._currentIconFetch = Subscription.EMPTY;\n      if (defaults) {\n        if (defaults.color) {\n          this.color = this.defaultColor = defaults.color;\n        }\n        if (defaults.fontSet) {\n          this.fontSet = defaults.fontSet;\n        }\n      }\n      // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n      // the right thing to do for the majority of icon use-cases.\n      if (!ariaHidden) {\n        elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n      }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n      const parts = iconName.split(':');\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n        case 2:\n          return parts;\n        default:\n          throw Error(`Invalid icon name: \"${iconName}\"`);\n        // TODO: add an ngDevMode check\n      }\n    }\n\n    ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n      const cachedElements = this._elementsWithExternalReferences;\n      if (cachedElements && cachedElements.size) {\n        const newPath = this._location.getPathname();\n        // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._currentIconFetch.unsubscribe();\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n    _usingFontIcon() {\n      return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n      this._clearSvgElement();\n      // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n      const layoutElement = this._elementRef.nativeElement;\n      let childCount = layoutElement.childNodes.length;\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n      // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n      while (childCount--) {\n        const child = layoutElement.childNodes[childCount];\n        // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          child.remove();\n        }\n      }\n    }\n    _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n      const elem = this._elementRef.nativeElement;\n      const fontSetClasses = (this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/) : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n      this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n      fontSetClasses.forEach(className => elem.classList.add(className));\n      this._previousFontSetClass = fontSetClasses;\n      if (this.fontIcon !== this._previousFontIconClass && !fontSetClasses.includes('mat-ligature-font')) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n      const elements = this._elementsWithExternalReferences;\n      if (elements) {\n        elements.forEach((attrs, element) => {\n          attrs.forEach(attr => {\n            element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n      const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n      for (let i = 0; i < elementsWithFuncIri.length; i++) {\n        funcIriAttributes.forEach(attr => {\n          const elementWithReference = elementsWithFuncIri[i];\n          const value = elementWithReference.getAttribute(attr);\n          const match = value ? value.match(funcIriPattern) : null;\n          if (match) {\n            let attributes = elements.get(elementWithReference);\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n      this._svgNamespace = null;\n      this._svgName = null;\n      this._currentIconFetch.unsubscribe();\n      if (rawName) {\n        const [namespace, iconName] = this._splitIconName(rawName);\n        if (namespace) {\n          this._svgNamespace = namespace;\n        }\n        if (iconName) {\n          this._svgName = iconName;\n        }\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => {\n          const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n          this._errorHandler.handleError(new Error(errorMessage));\n        });\n      }\n    }\n    static {\n      this.ɵfac = function MatIcon_Factory(t) {\n        return new (t || MatIcon)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatIconRegistry), i0.ɵɵinjectAttribute('aria-hidden'), i0.ɵɵdirectiveInject(MAT_ICON_LOCATION), i0.ɵɵdirectiveInject(i0.ErrorHandler), i0.ɵɵdirectiveInject(MAT_ICON_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatIcon,\n        selectors: [[\"mat-icon\"]],\n        hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n        hostVars: 8,\n        hostBindings: function MatIcon_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet)(\"fontIcon\", ctx._usingFontIcon() ? ctx.fontIcon : null);\n            i0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n          }\n        },\n        inputs: {\n          color: \"color\",\n          inline: \"inline\",\n          svgIcon: \"svgIcon\",\n          fontSet: \"fontSet\",\n          fontIcon: \"fontIcon\"\n        },\n        exportAs: [\"matIcon\"],\n        features: [i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 0,\n        template: function MatIcon_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatIcon;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatIconModule = /*#__PURE__*/(() => {\n  class MatIconModule {\n    static {\n      this.ɵfac = function MatIconModule_Factory(t) {\n        return new (t || MatIconModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatIconModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatIconModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };","map":{"version":3,"names":["i0","SecurityContext","Injectable","Optional","Inject","SkipSelf","ErrorHandler","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","_c0","policy","getPolicy","undefined","window","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","HTML","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","inline","_inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","elementRef","_iconRegistry","ariaHidden","defaults","_previousFontSetClass","_currentIconFetch","EMPTY","color","defaultColor","nativeElement","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","forEach","classList","add","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","subscribe","MatIcon_Factory","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports"],"sources":["C:/Users/GHAZI/Desktop/Back Up - Copie - Copie/back-office/node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}