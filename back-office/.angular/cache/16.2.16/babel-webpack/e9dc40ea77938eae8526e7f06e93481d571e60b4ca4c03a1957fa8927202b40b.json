{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nlet UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    /**\n     * Gets paginated list of users with sorting options\n     * @param page Page number (zero-based)\n     * @param size Number of items per page\n     * @param sortBy Field to sort by (default: createdAt)\n     * @param direction Sort direction (ASC or DESC)\n     * @returns Observable of UserPage containing paginated user data\n     */\n    getUsers(page = 0, size = 10, sortBy = 'createdAt', direction = 'DESC') {\n      return this.apiService.get('/api/admin/dashboard/users', {\n        page,\n        size,\n        sortBy,\n        direction\n      });\n    }\n    /**\n     * Searches for users based on a query string\n     * The API will search across username, email, and fullName fields\n     * @param query Search query (minimum 3 characters)\n     * @returns Observable of matching User objects\n     */\n    searchUsers(query) {\n      return this.apiService.get('/api/admin/dashboard/users/search', {\n        query\n      });\n    }\n    /**\n     * Bans a user by their username\n     * API endpoint: POST /api/admin/dashboard/ban/user/by-username/{username}\n     * Banned users cannot log in or perform any actions on the platform\n     * @param username The username of the user to ban\n     * @returns Observable of the API response\n     */\n    banUserByUsername(username) {\n      return this.apiService.post(`/api/admin/dashboard/ban/user/by-username/${username}`, {});\n    }\n    /**\n     * Unbans a user by their username\n     * API endpoint: POST /api/admin/dashboard/unban/user/by-username/{username}\n     * Restores normal access for previously banned users\n     * @param username The username of the user to unban\n     * @returns Observable of the API response\n     */\n    unbanUserByUsername(username) {\n      return this.apiService.post(`/api/admin/dashboard/unban/user/by-username/${username}`, {});\n    }\n    /**\n     * Gets a list of all banned users\n     * API endpoint: GET /api/admin/dashboard/users/banned\n     * @returns Observable of banned User objects\n     */\n    getBannedUsers() {\n      return this.apiService.get('/api/admin/dashboard/users/banned');\n    }\n    /**\n     * Bans a user by their email address\n     * API endpoint: POST /api/admin/dashboard/ban/user/by-email/{email}\n     * @param email The email of the user to ban\n     * @returns Observable of the API response\n     */\n    banUserByEmail(email) {\n      return this.apiService.post(`/api/admin/dashboard/ban/user/by-email/${email}`, {});\n    }\n    /**\n     * Unbans a user by their email address\n     * API endpoint: POST /api/admin/dashboard/unban/user/by-email/{email}\n     * @param email The email of the user to unban\n     * @returns Observable of the API response\n     */\n    unbanUserByEmail(email) {\n      return this.apiService.post(`/api/admin/dashboard/unban/user/by-email/${email}`, {});\n    }\n    /**\n     * Gets list of users that a specific user is following\n     * API endpoint: GET /api/admin/dashboard/users/{userId}/followings\n     * @param userId The unique ID of the user\n     * @returns Observable of UserProfile objects the user is following\n     */\n    getUserFollowings(userId) {\n      return this.apiService.get(`/api/admin/dashboard/users/${userId}/followings`);\n    }\n    /**\n     * Gets list of users who follow a specific user\n     * API endpoint: GET /api/admin/dashboard/users/{userId}/followers\n     * @param userId The unique ID of the user\n     * @returns Observable of UserProfile objects who follow the user\n     */\n    getUserFollowers(userId) {\n      return this.apiService.get(`/api/admin/dashboard/users/${userId}/followers`);\n    }\n    /**\n     * Gets list of users that a specific user is following (lookup by username)\n     * API endpoint: GET /api/admin/dashboard/users/by-username/{username}/followings\n     * @param username The username of the user\n     * @returns Observable of UserProfile objects the user is following\n     */\n    getUserFollowingsByUsername(username) {\n      return this.apiService.get(`/api/admin/dashboard/users/by-username/${username}/followings`);\n    }\n    /**\n     * Gets list of users who follow a specific user (lookup by username)\n     * API endpoint: GET /api/admin/dashboard/users/by-username/{username}/followers\n     * @param username The username of the user\n     * @returns Observable of UserProfile objects who follow the user\n     */\n    getUserFollowersByUsername(username) {\n      return this.apiService.get(`/api/admin/dashboard/users/by-username/${username}/followers`);\n    }\n    /**\n     * Gets list of users that a specific user is following (lookup by email)\n     * API endpoint: GET /api/admin/dashboard/users/by-email/{email}/followings\n     * @param email The email of the user\n     * @returns Observable of UserProfile objects the user is following\n     */\n    getUserFollowingsByEmail(email) {\n      return this.apiService.get(`/api/admin/dashboard/users/by-email/${email}/followings`);\n    }\n    /**\n     * Gets list of users who follow a specific user (lookup by email)\n     * API endpoint: GET /api/admin/dashboard/users/by-email/{email}/followers\n     * @param email The email of the user\n     * @returns Observable of UserProfile objects who follow the user\n     */\n    getUserFollowersByEmail(email) {\n      return this.apiService.get(`/api/admin/dashboard/users/by-email/${email}/followers`);\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.ApiService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();\nexport { UserService };","map":{"version":3,"names":["UserService","constructor","apiService","getUsers","page","size","sortBy","direction","get","searchUsers","query","banUserByUsername","username","post","unbanUserByUsername","getBannedUsers","banUserByEmail","email","unbanUserByEmail","getUserFollowings","userId","getUserFollowers","getUserFollowingsByUsername","getUserFollowersByUsername","getUserFollowingsByEmail","getUserFollowersByEmail","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\GHAZI\\Desktop\\Back Up - Copie - Copie\\back-office\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { User, UserPage, UserProfile } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  constructor(private apiService: ApiService) { }\n\n  /**\n   * Gets paginated list of users with sorting options\n   * @param page Page number (zero-based)\n   * @param size Number of items per page\n   * @param sortBy Field to sort by (default: createdAt)\n   * @param direction Sort direction (ASC or DESC)\n   * @returns Observable of UserPage containing paginated user data\n   */\n  getUsers(page: number = 0, size: number = 10, sortBy: string = 'createdAt', direction: string = 'DESC'): Observable<UserPage> {\n    return this.apiService.get<UserPage>('/api/admin/dashboard/users', {\n      page,\n      size,\n      sortBy,\n      direction\n    });\n  }\n\n  /**\n   * Searches for users based on a query string\n   * The API will search across username, email, and fullName fields\n   * @param query Search query (minimum 3 characters)\n   * @returns Observable of matching User objects\n   */\n  searchUsers(query: string): Observable<User[]> {\n    return this.apiService.get<User[]>('/api/admin/dashboard/users/search', { query });\n  }\n\n  /**\n   * Bans a user by their username\n   * API endpoint: POST /api/admin/dashboard/ban/user/by-username/{username}\n   * Banned users cannot log in or perform any actions on the platform\n   * @param username The username of the user to ban\n   * @returns Observable of the API response\n   */\n  banUserByUsername(username: string): Observable<any> {\n    return this.apiService.post<any>(`/api/admin/dashboard/ban/user/by-username/${username}`, {});\n  }\n  \n  /**\n   * Unbans a user by their username\n   * API endpoint: POST /api/admin/dashboard/unban/user/by-username/{username}\n   * Restores normal access for previously banned users\n   * @param username The username of the user to unban\n   * @returns Observable of the API response\n   */\n  unbanUserByUsername(username: string): Observable<any> {\n    return this.apiService.post<any>(`/api/admin/dashboard/unban/user/by-username/${username}`, {});\n  }\n  \n  /**\n   * Gets a list of all banned users\n   * API endpoint: GET /api/admin/dashboard/users/banned\n   * @returns Observable of banned User objects\n   */\n  getBannedUsers(): Observable<User[]> {\n    return this.apiService.get<User[]>('/api/admin/dashboard/users/banned');\n  }\n  \n  /**\n   * Bans a user by their email address\n   * API endpoint: POST /api/admin/dashboard/ban/user/by-email/{email}\n   * @param email The email of the user to ban\n   * @returns Observable of the API response\n   */\n  banUserByEmail(email: string): Observable<any> {\n    return this.apiService.post<any>(`/api/admin/dashboard/ban/user/by-email/${email}`, {});\n  }\n  \n  /**\n   * Unbans a user by their email address\n   * API endpoint: POST /api/admin/dashboard/unban/user/by-email/{email}\n   * @param email The email of the user to unban\n   * @returns Observable of the API response\n   */\n  unbanUserByEmail(email: string): Observable<any> {\n    return this.apiService.post<any>(`/api/admin/dashboard/unban/user/by-email/${email}`, {});\n  }\n\n  /**\n   * Gets list of users that a specific user is following\n   * API endpoint: GET /api/admin/dashboard/users/{userId}/followings\n   * @param userId The unique ID of the user\n   * @returns Observable of UserProfile objects the user is following\n   */\n  getUserFollowings(userId: string): Observable<UserProfile[]> {\n    return this.apiService.get<UserProfile[]>(`/api/admin/dashboard/users/${userId}/followings`);\n  }\n\n  /**\n   * Gets list of users who follow a specific user\n   * API endpoint: GET /api/admin/dashboard/users/{userId}/followers\n   * @param userId The unique ID of the user\n   * @returns Observable of UserProfile objects who follow the user\n   */\n  getUserFollowers(userId: string): Observable<UserProfile[]> {\n    return this.apiService.get<UserProfile[]>(`/api/admin/dashboard/users/${userId}/followers`);\n  }\n\n  /**\n   * Gets list of users that a specific user is following (lookup by username)\n   * API endpoint: GET /api/admin/dashboard/users/by-username/{username}/followings\n   * @param username The username of the user\n   * @returns Observable of UserProfile objects the user is following\n   */\n  getUserFollowingsByUsername(username: string): Observable<UserProfile[]> {\n    return this.apiService.get<UserProfile[]>(`/api/admin/dashboard/users/by-username/${username}/followings`);\n  }\n\n  /**\n   * Gets list of users who follow a specific user (lookup by username)\n   * API endpoint: GET /api/admin/dashboard/users/by-username/{username}/followers\n   * @param username The username of the user\n   * @returns Observable of UserProfile objects who follow the user\n   */\n  getUserFollowersByUsername(username: string): Observable<UserProfile[]> {\n    return this.apiService.get<UserProfile[]>(`/api/admin/dashboard/users/by-username/${username}/followers`);\n  }\n\n  /**\n   * Gets list of users that a specific user is following (lookup by email)\n   * API endpoint: GET /api/admin/dashboard/users/by-email/{email}/followings\n   * @param email The email of the user\n   * @returns Observable of UserProfile objects the user is following\n   */\n  getUserFollowingsByEmail(email: string): Observable<UserProfile[]> {\n    return this.apiService.get<UserProfile[]>(`/api/admin/dashboard/users/by-email/${email}/followings`);\n  }\n\n  /**\n   * Gets list of users who follow a specific user (lookup by email)\n   * API endpoint: GET /api/admin/dashboard/users/by-email/{email}/followers\n   * @param email The email of the user\n   * @returns Observable of UserProfile objects who follow the user\n   */\n  getUserFollowersByEmail(email: string): Observable<UserProfile[]> {\n    return this.apiService.get<UserProfile[]>(`/api/admin/dashboard/users/by-email/${email}/followers`);\n  }\n}\n"],"mappings":";;IAQaA,WAAW;EAHxB,MAGaA,WAAW;IACtBC,YAAoBC,UAAsB;MAAtB,KAAAA,UAAU,GAAVA,UAAU;IAAgB;IAE9C;;;;;;;;IAQAC,QAAQA,CAACC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,SAAA,GAAoB,MAAM;MACpG,OAAO,IAAI,CAACL,UAAU,CAACM,GAAG,CAAW,4BAA4B,EAAE;QACjEJ,IAAI;QACJC,IAAI;QACJC,MAAM;QACNC;OACD,CAAC;IACJ;IAEA;;;;;;IAMAE,WAAWA,CAACC,KAAa;MACvB,OAAO,IAAI,CAACR,UAAU,CAACM,GAAG,CAAS,mCAAmC,EAAE;QAAEE;MAAK,CAAE,CAAC;IACpF;IAEA;;;;;;;IAOAC,iBAAiBA,CAACC,QAAgB;MAChC,OAAO,IAAI,CAACV,UAAU,CAACW,IAAI,CAAM,6CAA6CD,QAAQ,EAAE,EAAE,EAAE,CAAC;IAC/F;IAEA;;;;;;;IAOAE,mBAAmBA,CAACF,QAAgB;MAClC,OAAO,IAAI,CAACV,UAAU,CAACW,IAAI,CAAM,+CAA+CD,QAAQ,EAAE,EAAE,EAAE,CAAC;IACjG;IAEA;;;;;IAKAG,cAAcA,CAAA;MACZ,OAAO,IAAI,CAACb,UAAU,CAACM,GAAG,CAAS,mCAAmC,CAAC;IACzE;IAEA;;;;;;IAMAQ,cAAcA,CAACC,KAAa;MAC1B,OAAO,IAAI,CAACf,UAAU,CAACW,IAAI,CAAM,0CAA0CI,KAAK,EAAE,EAAE,EAAE,CAAC;IACzF;IAEA;;;;;;IAMAC,gBAAgBA,CAACD,KAAa;MAC5B,OAAO,IAAI,CAACf,UAAU,CAACW,IAAI,CAAM,4CAA4CI,KAAK,EAAE,EAAE,EAAE,CAAC;IAC3F;IAEA;;;;;;IAMAE,iBAAiBA,CAACC,MAAc;MAC9B,OAAO,IAAI,CAAClB,UAAU,CAACM,GAAG,CAAgB,8BAA8BY,MAAM,aAAa,CAAC;IAC9F;IAEA;;;;;;IAMAC,gBAAgBA,CAACD,MAAc;MAC7B,OAAO,IAAI,CAAClB,UAAU,CAACM,GAAG,CAAgB,8BAA8BY,MAAM,YAAY,CAAC;IAC7F;IAEA;;;;;;IAMAE,2BAA2BA,CAACV,QAAgB;MAC1C,OAAO,IAAI,CAACV,UAAU,CAACM,GAAG,CAAgB,0CAA0CI,QAAQ,aAAa,CAAC;IAC5G;IAEA;;;;;;IAMAW,0BAA0BA,CAACX,QAAgB;MACzC,OAAO,IAAI,CAACV,UAAU,CAACM,GAAG,CAAgB,0CAA0CI,QAAQ,YAAY,CAAC;IAC3G;IAEA;;;;;;IAMAY,wBAAwBA,CAACP,KAAa;MACpC,OAAO,IAAI,CAACf,UAAU,CAACM,GAAG,CAAgB,uCAAuCS,KAAK,aAAa,CAAC;IACtG;IAEA;;;;;;IAMAQ,uBAAuBA,CAACR,KAAa;MACnC,OAAO,IAAI,CAACf,UAAU,CAACM,GAAG,CAAgB,uCAAuCS,KAAK,YAAY,CAAC;IACrG;;;yBA3IWjB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;MAAA;IAAA;;;eAAX7B,WAAW;QAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;QAAAC,UAAA,EAFV;MAAM;IAAA;;SAEPhC,WAAW;AAAA;SAAXA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}