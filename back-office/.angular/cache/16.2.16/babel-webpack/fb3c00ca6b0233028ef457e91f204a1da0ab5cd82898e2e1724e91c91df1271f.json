{"ast":null,"code":"import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 12);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\nfunction MatSelect_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 15, 16);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_10_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: /*#__PURE__*/trigger('transformPanelWrap', [/*#__PURE__*/transition('* => void', /*#__PURE__*/query('@transformPanel', [/*#__PURE__*/animateChild()], {\n    optional: true\n  }))]),\n  /** This animation transforms the select's overlay panel on and off the page. */\n  transformPanel: /*#__PURE__*/trigger('transformPanel', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), /*#__PURE__*/transition('void => showing', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = /*#__PURE__*/new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n  constructor( /** Reference to the select that emitted the change event. */\n  source, /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /**\n   * Form control bound to the component.\n   * Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    this.stateChanges = new Subject();\n  }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nlet _MatSelectBase = /*#__PURE__*/(() => {\n  class _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n      return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n      return this._placeholder;\n    }\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n      return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n      return this._multiple;\n    }\n    set multiple(value) {\n      if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectDynamicMultipleError();\n      }\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n      return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n      return this._compareWith;\n    }\n    set compareWith(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonFunctionValueError();\n      }\n      this._compareWith = fn;\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /** Value of the select control. */\n    get value() {\n      return this._value;\n    }\n    set value(newValue) {\n      const hasAssigned = this._assignValue(newValue);\n      if (hasAssigned) {\n        this._onChange(newValue);\n      }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n      return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n      this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n      return this._id;\n    }\n    set id(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n      super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      this._viewportRuler = _viewportRuler;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._ngZone = _ngZone;\n      this._dir = _dir;\n      this._parentFormField = _parentFormField;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._defaultOptions = _defaultOptions;\n      /** Whether or not the overlay panel is open. */\n      this._panelOpen = false;\n      /** Comparison function to specify which option is displayed. Defaults to object equality. */\n      this._compareWith = (o1, o2) => o1 === o2;\n      /** Unique id for this input. */\n      this._uid = `mat-select-${nextUniqueId++}`;\n      /** Current `aria-labelledby` value for the select trigger. */\n      this._triggerAriaLabelledBy = null;\n      /** Emits whenever the component is destroyed. */\n      this._destroy = new Subject();\n      /** `View -> model callback called when value changes` */\n      this._onChange = () => {};\n      /** `View -> model callback called when select has been touched` */\n      this._onTouched = () => {};\n      /** ID for the DOM node containing the select's value. */\n      this._valueId = `mat-select-value-${nextUniqueId++}`;\n      /** Emits when the panel element is finished transforming in. */\n      this._panelDoneAnimatingStream = new Subject();\n      this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n      this._focused = false;\n      /** A name for this control that can be used by `mat-form-field`. */\n      this.controlType = 'mat-select';\n      this._multiple = false;\n      this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n      /** Aria label of the select. */\n      this.ariaLabel = '';\n      /** Combined stream of all of the child options' change events. */\n      this.optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n          return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n      });\n      /** Event emitted when the select panel has been toggled. */\n      this.openedChange = new EventEmitter();\n      /** Event emitted when the select has been opened. */\n      this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n      /** Event emitted when the select has been closed. */\n      this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n      /** Event emitted when the selected value has been changed by the user. */\n      this.selectionChange = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the select changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n      this.valueChange = new EventEmitter();\n      /**\n       * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n       * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n       * panel. Track the modal we have changed so we can undo the changes on destroy.\n       */\n      this._trackedModal = null;\n      if (this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        this.ngControl.valueAccessor = this;\n      }\n      // Note that we only want to set this when the defaults pass it in, otherwise it should\n      // stay as `undefined` so that it falls back to the default in the key manager.\n      if (_defaultOptions?.typeaheadDebounceInterval != null) {\n        this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n      }\n      this._scrollStrategyFactory = scrollStrategyFactory;\n      this._scrollStrategy = this._scrollStrategyFactory();\n      this.tabIndex = parseInt(tabIndex) || 0;\n      // Force setter to be called in case id was not specified.\n      this.id = this.id;\n    }\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next();\n      // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n      this._initKeyManager();\n      this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n        event.added.forEach(option => option.select());\n        event.removed.forEach(option => option.deselect());\n      });\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n        this._resetOptions();\n        this._initializeSelection();\n      });\n    }\n    ngDoCheck() {\n      const newAriaLabelledby = this._getTriggerAriaLabelledby();\n      const ngControl = this.ngControl;\n      // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n      // is computed as a result of a content query which can cause this binding to trigger a\n      // \"changed after checked\" error.\n      if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n        const element = this._elementRef.nativeElement;\n        this._triggerAriaLabelledBy = newAriaLabelledby;\n        if (newAriaLabelledby) {\n          element.setAttribute('aria-labelledby', newAriaLabelledby);\n        } else {\n          element.removeAttribute('aria-labelledby');\n        }\n      }\n      if (ngControl) {\n        // The disabled state might go out of sync if the form group is swapped out. See #17860.\n        if (this._previousControl !== ngControl.control) {\n          if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {\n            this.disabled = ngControl.disabled;\n          }\n          this._previousControl = ngControl.control;\n        }\n        this.updateErrorState();\n      }\n    }\n    ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled'] || changes['userAriaDescribedBy']) {\n        this.stateChanges.next();\n      }\n      if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n        this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n      }\n    }\n    ngOnDestroy() {\n      this._keyManager?.destroy();\n      this._destroy.next();\n      this._destroy.complete();\n      this.stateChanges.complete();\n      this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n      if (this._canOpen()) {\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n      // the `LiveAnnouncer` and any other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      if (!modal) {\n        // Most commonly, the autocomplete trigger is not inside a modal.\n        return;\n      }\n      const panelId = `${this.id}-panel`;\n      if (this._trackedModal) {\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      }\n      addAriaReferencedId(modal, 'aria-owns', panelId);\n      this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n      if (!this._trackedModal) {\n        // Most commonly, the autocomplete trigger is not used inside a modal.\n        return;\n      }\n      const panelId = `${this.id}-panel`;\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n        this._changeDetectorRef.markForCheck();\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n      this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n      return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n      return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n      if (this.empty) {\n        return '';\n      }\n      if (this._multiple) {\n        const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        }\n        // TODO(crisbeto): delimiter should be configurable for proper localization.\n        return selectedOptions.join(', ');\n      }\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      const manager = this._keyManager;\n      // Open the select on ALT + arrow key to match the native <select>\n      if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (!this.multiple) {\n        const previouslySelectedOption = this.selected;\n        manager.onKeydown(event);\n        const selectedOption = this.selected;\n        // Since the value has changed, we need to announce it ourselves.\n        if (selectedOption && previouslySelectedOption !== selectedOption) {\n          // We set a duration on the live announcement, because we want the live element to be\n          // cleared after a while so that users can't navigate to it using the arrow keys.\n          this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n        }\n      }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n      const manager = this._keyManager;\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const isTyping = manager.isTyping();\n      if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close();\n        // Don't do anything in this case if the user is typing,\n        // because the typing sequence can include the space key.\n      } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n        manager.activeItem._selectViaInteraction();\n      } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n        this.options.forEach(option => {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        const previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n    _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n      this._focused = false;\n      this._keyManager?.cancelTypeahead();\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n      this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n        this._changeDetectorRef.detectChanges();\n        this._positioningSettled();\n      });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n      return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        if (this.ngControl) {\n          this._value = this.ngControl.value;\n        }\n        this._setSelectionByValue(this._value);\n        this.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n      this.options.forEach(option => option.setInactiveStyles());\n      this._selectionModel.clear();\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonArrayValueError();\n        }\n        value.forEach(currentValue => this._selectOptionByValue(currentValue));\n        this._sortValues();\n      } else {\n        const correspondingOption = this._selectOptionByValue(value);\n        // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n        if (correspondingOption) {\n          this._keyManager.updateActiveItem(correspondingOption);\n        } else if (!this.panelOpen) {\n          // Otherwise reset the highlighted option. Note that we only want to do this while\n          // closed, because doing it while open can shift the user's focus unnecessarily.\n          this._keyManager.updateActiveItem(-1);\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (this._selectionModel.isSelected(option)) {\n          return false;\n        }\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && this._compareWith(option.value, value);\n        } catch (error) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n          return false;\n        }\n      });\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n      return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n      // Always re-assign an array, because it might have been mutated.\n      if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n        if (this.options) {\n          this._setSelectionByValue(newValue);\n        }\n        this._value = newValue;\n        return true;\n      }\n      return false;\n    }\n    _skipPredicate(item) {\n      return item.disabled;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withPageUpDown().withAllowedModifierKeys(['shiftKey']).skipPredicate(this._skipPredicate);\n      this._keyManager.tabOut.subscribe(() => {\n        if (this.panelOpen) {\n          // Select the active item when tabbing away. This is consistent with how the native\n          // select behaves. Note that we only want to do this in single selection mode.\n          if (!this.multiple && this._keyManager.activeItem) {\n            this._keyManager.activeItem._selectViaInteraction();\n          }\n          // Restore focus to the trigger before closing. Ensures that the focus\n          // position won't be lost if the user got focus into the overlay.\n          this.focus();\n          this.close();\n        }\n      });\n      this._keyManager.change.subscribe(() => {\n        if (this._panelOpen && this.panel) {\n          this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n        } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n      const changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n        this._onSelect(event.source, event.isUserInput);\n        if (event.isUserInput && !this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n      // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n      merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n        // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n        // be the result of an expression changing. We have to use `detectChanges` in order\n        // to avoid \"changed after checked\" errors (see #14793).\n        this._changeDetectorRef.detectChanges();\n        this.stateChanges.next();\n      });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n      const wasSelected = this._selectionModel.isSelected(option);\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n        this._selectionModel.clear();\n        if (this.value != null) {\n          this._propagateChanges(option.value);\n        }\n      } else {\n        if (wasSelected !== option.selected) {\n          option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n        }\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n        if (this.multiple) {\n          this._sortValues();\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n      this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n      if (this.multiple) {\n        const options = this.options.toArray();\n        this._selectionModel.sort((a, b) => {\n          return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n      let valueToEmit = null;\n      if (this.multiple) {\n        valueToEmit = this.selected.map(option => option.value);\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n      this._onChange(valueToEmit);\n      this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n          // because it activates the first option that passes the skip predicate, rather than the\n          // first *enabled* option.\n          let firstEnabledOptionIndex = -1;\n          for (let index = 0; index < this.options.length; index++) {\n            const option = this.options.get(index);\n            if (!option.disabled) {\n              firstEnabledOptionIndex = index;\n              break;\n            }\n          }\n          this._keyManager.setActiveItem(firstEnabledOptionIndex);\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n      return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelId = this._parentFormField?.getLabelId();\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n      return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelId = this._parentFormField?.getLabelId();\n      let value = (labelId ? labelId + ' ' : '') + this._valueId;\n      if (this.ariaLabelledby) {\n        value += ' ' + this.ariaLabelledby;\n      }\n      return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n      this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n      return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n    }\n    static {\n      this.ɵfac = function _MatSelectBase_Factory(t) {\n        return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: _MatSelectBase,\n        viewQuery: function _MatSelectBase_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n            i0.ɵɵviewQuery(_c1, 5);\n            i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n          }\n        },\n        inputs: {\n          userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n          panelClass: \"panelClass\",\n          placeholder: \"placeholder\",\n          required: \"required\",\n          multiple: \"multiple\",\n          disableOptionCentering: \"disableOptionCentering\",\n          compareWith: \"compareWith\",\n          value: \"value\",\n          ariaLabel: [\"aria-label\", \"ariaLabel\"],\n          ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n          errorStateMatcher: \"errorStateMatcher\",\n          typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n          sortComparator: \"sortComparator\",\n          id: \"id\"\n        },\n        outputs: {\n          openedChange: \"openedChange\",\n          _openedStream: \"opened\",\n          _closedStream: \"closed\",\n          selectionChange: \"selectionChange\",\n          valueChange: \"valueChange\"\n        },\n        features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return _MatSelectBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nlet MatSelectTrigger = /*#__PURE__*/(() => {\n  class MatSelectTrigger {\n    static {\n      this.ɵfac = function MatSelectTrigger_Factory(t) {\n        return new (t || MatSelectTrigger)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSelectTrigger,\n        selectors: [[\"mat-select-trigger\"]],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_SELECT_TRIGGER,\n          useExisting: MatSelectTrigger\n        }])]\n      });\n    }\n  }\n  return MatSelectTrigger;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSelect = /*#__PURE__*/(() => {\n  class MatSelect extends _MatSelectBase {\n    constructor() {\n      super(...arguments);\n      /**\n       * Width of the panel. If set to `auto`, the panel will match the trigger width.\n       * If set to null or an empty string, the panel will grow to match the longest option's text.\n       */\n      this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined' ? this._defaultOptions.panelWidth : 'auto';\n      this._positions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass: 'mat-mdc-select-panel-above'\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass: 'mat-mdc-select-panel-above'\n      }];\n      this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n      // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n      // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n      // recommendation.\n      //\n      // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n      // makes a few exceptions for compound widgets.\n      //\n      // From [Developing a Keyboard Interface](\n      // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n      //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n      //   Listbox...\"\n      //\n      // The user can focus disabled options using the keyboard, but the user cannot click disabled\n      // options.\n      this._skipPredicate = option => {\n        if (this.panelOpen) {\n          // Support keyboard focusing disabled options in an ARIA listbox.\n          return false;\n        }\n        // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n        // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n        // closed.\n        return option.disabled;\n      };\n    }\n    get shouldLabelFloat() {\n      // Since the panel doesn't overlap the trigger, we\n      // want the label to only float when there's a value.\n      return this.panelOpen || !this.empty || this.focused && !!this.placeholder;\n    }\n    ngOnInit() {\n      super.ngOnInit();\n      this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n        if (this.panelOpen) {\n          this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n    }\n    open() {\n      // It's important that we read this as late as possible, because doing so earlier will\n      // return a different element since it's based on queries in the form field which may\n      // not have run yet. Also this needs to be assigned before we measure the overlay width.\n      if (this._parentFormField) {\n        this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n      }\n      this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n      super.open();\n      // Required for the MDC form field to pick up when the overlay has been opened.\n      this.stateChanges.next();\n    }\n    close() {\n      super.close();\n      // Required for the MDC form field to pick up when the overlay has been closed.\n      this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n      const option = this.options.toArray()[index];\n      if (option) {\n        const panel = this.panel.nativeElement;\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const element = option._getHostElement();\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          panel.scrollTop = 0;\n        } else {\n          panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n        }\n      }\n    }\n    _positioningSettled() {\n      this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n      return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n      if (this.panelWidth === 'auto') {\n        const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin ? preferredOrigin.elementRef : preferredOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n      }\n      return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n      this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n      if (this.options) {\n        for (const option of this.options) {\n          option._changeDetectorRef.markForCheck();\n        }\n      }\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */function () {\n        let ɵMatSelect_BaseFactory;\n        return function MatSelect_Factory(t) {\n          return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n        };\n      }();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSelect,\n        selectors: [[\"mat-select\"]],\n        contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n            i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n            i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n          }\n        },\n        hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"listbox\", \"ngSkipHydration\", \"\", 1, \"mat-mdc-select\"],\n        hostVars: 19,\n        hostBindings: function MatSelect_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n              return ctx._handleKeydown($event);\n            })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n              return ctx._onFocus();\n            })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n              return ctx._onBlur();\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n            i0.ɵɵclassProp(\"mat-mdc-select-disabled\", ctx.disabled)(\"mat-mdc-select-invalid\", ctx.errorState)(\"mat-mdc-select-required\", ctx.required)(\"mat-mdc-select-empty\", ctx.empty)(\"mat-mdc-select-multiple\", ctx.multiple);\n          }\n        },\n        inputs: {\n          disabled: \"disabled\",\n          disableRipple: \"disableRipple\",\n          tabIndex: \"tabIndex\",\n          panelWidth: \"panelWidth\",\n          hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\"\n        },\n        exportAs: [\"matSelect\"],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MatFormFieldControl,\n          useExisting: MatSelect\n        }, {\n          provide: MAT_OPTION_PARENT_COMPONENT,\n          useExisting: MatSelect\n        }]), i0.ɵɵInheritDefinitionFeature],\n        ngContentSelectors: _c3,\n        decls: 11,\n        vars: 10,\n        consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-mdc-select-trigger\", 3, \"click\"], [\"fallbackOverlayOrigin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-mdc-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-placeholder mat-mdc-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-mdc-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-mdc-select-arrow-wrapper\"], [1, \"mat-mdc-select-arrow\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M7 10l5 5 5-5z\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayWidth\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-mdc-select-placeholder\", \"mat-mdc-select-min-line\"], [1, \"mat-mdc-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-mdc-select-min-line\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n        template: function MatSelect_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c2);\n            i0.ɵɵelementStart(0, \"div\", 0, 1);\n            i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n              return ctx.toggle();\n            });\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n            i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6);\n            i0.ɵɵnamespaceSVG();\n            i0.ɵɵelementStart(8, \"svg\", 7);\n            i0.ɵɵelement(9, \"path\", 8);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵtemplate(10, MatSelect_ng_template_10_Template, 3, 9, \"ng-template\", 9);\n            i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_10_listener() {\n              return ctx.close();\n            })(\"attach\", function MatSelect_Template_ng_template_attach_10_listener() {\n              return ctx._onAttached();\n            })(\"detach\", function MatSelect_Template_ng_template_detach_10_listener() {\n              return ctx.close();\n            });\n          }\n          if (rf & 2) {\n            const _r0 = i0.ɵɵreference(1);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n            i0.ɵɵattribute(\"id\", ctx._valueId);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitchCase\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitchCase\", false);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", ctx._preferredOverlayOrigin || _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayWidth\", ctx._overlayWidth);\n          }\n        },\n        dependencies: [i7.NgClass, i7.NgSwitch, i7.NgSwitchCase, i7.NgSwitchDefault, i8.CdkConnectedOverlay, i8.CdkOverlayOrigin],\n        styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"],\n        encapsulation: 2,\n        data: {\n          animation: [matSelectAnimations.transformPanel]\n        },\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSelect;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSelectModule = /*#__PURE__*/(() => {\n  class MatSelectModule {\n    static {\n      this.ɵfac = function MatSelectModule_Factory(t) {\n        return new (t || MatSelectModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatSelectModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n        imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n      });\n    }\n  }\n  return MatSelectModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["i8","Overlay","CdkConnectedOverlay","CdkOverlayOrigin","OverlayModule","i7","CommonModule","i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Self","Attribute","Input","ViewChild","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","removeAriaReferencedId","addAriaReferencedId","ActiveDescendantKeyManager","i3","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_10_Template","_r9","ɵɵgetCurrentView","ɵɵnamespaceSVG","ɵɵnamespaceHTML","ɵɵlistener","MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener","$event","ɵɵrestoreView","ctx_r8","ɵɵresetView","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_10_Template_div_keydown_0_listener","ctx_r10","_handleKeydown","ctx_r4","ɵɵclassMapInterpolate1","_getPanelTheme","panelClass","ɵɵattribute","id","multiple","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","opacity","transform","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","_MatSelectBase","focused","_focused","_panelOpen","_placeholder","required","_required","control","hasValidator","_multiple","_selectionModel","ngDevMode","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","controlType","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","_trackedModal","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","_clearFromModal","toggle","close","open","_canOpen","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","_skipPredicate","item","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","firstEnabledOptionIndex","index","length","get","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","_MatSelectBase_Factory","t","ɵɵdirectiveInject","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","ɵɵinjectAttribute","LiveAnnouncer","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatSelectBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","userAriaDescribedBy","errorStateMatcher","outputs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","MatSelectTrigger","MatSelectTrigger_Factory","selectors","ɵɵProvidersFeature","useExisting","MatSelect","arguments","panelWidth","_positions","originX","originY","overlayX","overlayY","_hideSingleSelectionIndicator","hideSingleSelectionIndicator","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","getConnectedOverlayOrigin","labelCount","optionGroups","_getHostElement","scrollTop","offsetTop","offsetHeight","preferredOrigin","refToMeasure","getBoundingClientRect","width","_syncParentProperties","ɵMatSelect_BaseFactory","MatSelect_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","errorState","ɵɵclassProp","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵelement","MatSelect_Template_ng_template_backdropClick_10_listener","MatSelect_Template_ng_template_attach_10_listener","MatSelect_Template_ng_template_detach_10_listener","_r0","ɵɵreference","dependencies","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","styles","encapsulation","data","animation","changeDetection","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports"],"sources":["C:/Users/GHAZI/Desktop/Back Up - Copie - Copie/back-office/node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._applyModalPanelOwnership();\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    _skipPredicate(item) {\n        return item.disabled;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    open() {\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", panelWidth: \"panelWidth\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\", \"ngSkipHydration\": \"\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        'ngSkipHydration': '',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], panelWidth: [{\n                type: Input\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}